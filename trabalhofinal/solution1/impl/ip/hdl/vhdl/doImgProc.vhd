-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity doImgProc is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_KERNEL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_KERNEL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    inStream_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_KERNEL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_WVALID : IN STD_LOGIC;
    s_axi_KERNEL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_KERNEL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_KERNEL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_RREADY : IN STD_LOGIC;
    s_axi_KERNEL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_KERNEL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_BREADY : IN STD_LOGIC;
    s_axi_KERNEL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of doImgProc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "doImgProc,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35tcpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.668000,HLS_SYN_LAT=1920007,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=0,HLS_SYN_FF=1735,HLS_SYN_LUT=3887}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage24 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv17_12C00 : STD_LOGIC_VECTOR (16 downto 0) := "10010110000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inStream_V_data_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_data_V_0_vld_in : STD_LOGIC;
    signal inStream_V_data_V_0_vld_out : STD_LOGIC;
    signal inStream_V_data_V_0_ack_in : STD_LOGIC;
    signal inStream_V_data_V_0_ack_out : STD_LOGIC;
    signal inStream_V_data_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_data_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_data_V_0_sel : STD_LOGIC;
    signal inStream_V_data_V_0_load_A : STD_LOGIC;
    signal inStream_V_data_V_0_load_B : STD_LOGIC;
    signal inStream_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_keep_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_keep_V_0_vld_in : STD_LOGIC;
    signal inStream_V_keep_V_0_vld_out : STD_LOGIC;
    signal inStream_V_keep_V_0_ack_in : STD_LOGIC;
    signal inStream_V_keep_V_0_ack_out : STD_LOGIC;
    signal inStream_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_keep_V_0_sel : STD_LOGIC;
    signal inStream_V_keep_V_0_load_A : STD_LOGIC;
    signal inStream_V_keep_V_0_load_B : STD_LOGIC;
    signal inStream_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_strb_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_strb_V_0_vld_in : STD_LOGIC;
    signal inStream_V_strb_V_0_vld_out : STD_LOGIC;
    signal inStream_V_strb_V_0_ack_in : STD_LOGIC;
    signal inStream_V_strb_V_0_ack_out : STD_LOGIC;
    signal inStream_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_strb_V_0_sel : STD_LOGIC;
    signal inStream_V_strb_V_0_load_A : STD_LOGIC;
    signal inStream_V_strb_V_0_load_B : STD_LOGIC;
    signal inStream_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_user_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_vld_in : STD_LOGIC;
    signal inStream_V_user_V_0_vld_out : STD_LOGIC;
    signal inStream_V_user_V_0_ack_in : STD_LOGIC;
    signal inStream_V_user_V_0_ack_out : STD_LOGIC;
    signal inStream_V_user_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_user_V_0_sel : STD_LOGIC;
    signal inStream_V_user_V_0_load_A : STD_LOGIC;
    signal inStream_V_user_V_0_load_B : STD_LOGIC;
    signal inStream_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_last_V_0_vld_in : STD_LOGIC;
    signal inStream_V_last_V_0_vld_out : STD_LOGIC;
    signal inStream_V_last_V_0_ack_in : STD_LOGIC;
    signal inStream_V_last_V_0_ack_out : STD_LOGIC;
    signal inStream_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_last_V_0_sel : STD_LOGIC;
    signal inStream_V_last_V_0_load_A : STD_LOGIC;
    signal inStream_V_last_V_0_load_B : STD_LOGIC;
    signal inStream_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_dest_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_vld_in : STD_LOGIC;
    signal inStream_V_dest_V_0_vld_out : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_in : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_out : STD_LOGIC;
    signal inStream_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_dest_V_0_sel : STD_LOGIC;
    signal inStream_V_dest_V_0_load_A : STD_LOGIC;
    signal inStream_V_dest_V_0_load_B : STD_LOGIC;
    signal inStream_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal outStream_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_data_V_1_vld_in : STD_LOGIC;
    signal outStream_V_data_V_1_vld_out : STD_LOGIC;
    signal outStream_V_data_V_1_ack_in : STD_LOGIC;
    signal outStream_V_data_V_1_ack_out : STD_LOGIC;
    signal outStream_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_data_V_1_sel : STD_LOGIC;
    signal outStream_V_data_V_1_load_A : STD_LOGIC;
    signal outStream_V_data_V_1_load_B : STD_LOGIC;
    signal outStream_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_keep_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_keep_V_1_vld_in : STD_LOGIC;
    signal outStream_V_keep_V_1_vld_out : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_in : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_out : STD_LOGIC;
    signal outStream_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel : STD_LOGIC;
    signal outStream_V_keep_V_1_load_A : STD_LOGIC;
    signal outStream_V_keep_V_1_load_B : STD_LOGIC;
    signal outStream_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_strb_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_strb_V_1_vld_in : STD_LOGIC;
    signal outStream_V_strb_V_1_vld_out : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_in : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_out : STD_LOGIC;
    signal outStream_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel : STD_LOGIC;
    signal outStream_V_strb_V_1_load_A : STD_LOGIC;
    signal outStream_V_strb_V_1_load_B : STD_LOGIC;
    signal outStream_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_vld_in : STD_LOGIC;
    signal outStream_V_user_V_1_vld_out : STD_LOGIC;
    signal outStream_V_user_V_1_ack_in : STD_LOGIC;
    signal outStream_V_user_V_1_ack_out : STD_LOGIC;
    signal outStream_V_user_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel : STD_LOGIC;
    signal outStream_V_user_V_1_load_A : STD_LOGIC;
    signal outStream_V_user_V_1_load_B : STD_LOGIC;
    signal outStream_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_vld_in : STD_LOGIC;
    signal outStream_V_last_V_1_vld_out : STD_LOGIC;
    signal outStream_V_last_V_1_ack_in : STD_LOGIC;
    signal outStream_V_last_V_1_ack_out : STD_LOGIC;
    signal outStream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel : STD_LOGIC;
    signal outStream_V_last_V_1_load_A : STD_LOGIC;
    signal outStream_V_last_V_1_load_B : STD_LOGIC;
    signal outStream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_vld_in : STD_LOGIC;
    signal outStream_V_id_V_1_vld_out : STD_LOGIC;
    signal outStream_V_id_V_1_ack_in : STD_LOGIC;
    signal outStream_V_id_V_1_ack_out : STD_LOGIC;
    signal outStream_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel : STD_LOGIC;
    signal outStream_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_vld_in : STD_LOGIC;
    signal outStream_V_dest_V_1_vld_out : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_in : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_out : STD_LOGIC;
    signal outStream_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel : STD_LOGIC;
    signal outStream_V_dest_V_1_load_A : STD_LOGIC;
    signal outStream_V_dest_V_1_load_B : STD_LOGIC;
    signal outStream_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal kernel_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal kernel_ce0 : STD_LOGIC;
    signal kernel_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal operation : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal exitcond1_reg_2073 : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal exitcond1_reg_2073_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal idxRow_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_assign_reg_710 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixProcessed_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxPixel_reg_733 : STD_LOGIC_VECTOR (16 downto 0);
    signal reg_744 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state30_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state32_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state32_io : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state11_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state13_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_state15_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_state17_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage17 : signal is "none";
    signal ap_block_state19_pp0_stage17_iter0 : BOOLEAN;
    signal ap_block_pp0_stage17_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage19 : signal is "none";
    signal ap_block_state21_pp0_stage19_iter0 : BOOLEAN;
    signal ap_block_pp0_stage19_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage21 : signal is "none";
    signal ap_block_state23_pp0_stage21_iter0 : BOOLEAN;
    signal ap_block_pp0_stage21_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage24 : signal is "none";
    signal ap_block_state26_pp0_stage24_iter0 : BOOLEAN;
    signal ap_block_pp0_stage24_11001 : BOOLEAN;
    signal reg_748 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state29_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state31_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state31_io : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state10_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state12_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_state14_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_state16_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_block_state18_pp0_stage16_iter0 : BOOLEAN;
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage18 : signal is "none";
    signal ap_block_state20_pp0_stage18_iter0 : BOOLEAN;
    signal ap_block_pp0_stage18_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage20 : signal is "none";
    signal ap_block_state22_pp0_stage20_iter0 : BOOLEAN;
    signal ap_block_pp0_stage20_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage23 : signal is "none";
    signal ap_block_state25_pp0_stage23_iter0 : BOOLEAN;
    signal ap_block_pp0_stage23_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal lineBuff_val_0_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_752 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp2_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_2058 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_reg_2063 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_reg_2068 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxPixel_1_fu_780_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal idxPixel_1_reg_2077 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_2082 : STD_LOGIC_VECTOR (63 downto 0);
    signal lineBuff_val_1_addr_reg_2087 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_addr_reg_2092 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_3_addr_reg_2097 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_4_addr_reg_2102 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_cond_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_2107 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_2115 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxCol_fu_838_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxCol_reg_2121 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_1_fu_850_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_1_reg_2126 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_keep_V_reg_2131 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_2131_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_2136 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_2136_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_2141 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_2141_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_last_V_reg_2146 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_2146_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_2151 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_2151_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_883_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_2156 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_0_1_fu_897_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_0_1_reg_2166 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp3_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_reg_2206 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_reg_2206_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_924_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_reg_2211 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_reg_2211_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_reg_2216 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_reg_2216_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal idxCol_1_fu_948_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxCol_1_reg_2221 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixProcessed_2_fu_954_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixProcessed_2_reg_2226 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_val_0_0_fu_969_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_0_0_reg_2231 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_0_2_fu_981_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_0_2_reg_2236 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_0_3_fu_995_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_0_3_reg_2246 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_0_4_fu_1009_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_0_4_reg_2256 : STD_LOGIC_VECTOR (63 downto 0);
    signal lineBuff_val_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_load_1_reg_2264 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_load_2_reg_2269 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_load_1_reg_2284 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_load_2_reg_2289 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_3_load_1_reg_2304 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_3_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_3_load_2_reg_2309 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_1014_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_reg_2334 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_1_fu_1026_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_0_1_reg_2340 : STD_LOGIC_VECTOR (15 downto 0);
    signal lineBuff_val_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_0_load_3_reg_2345 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_load_3_reg_2355 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_load_4_reg_2360 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_load_3_reg_2370 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_load_4_reg_2375 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_3_load_3_reg_2385 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_3_load_4_reg_2390 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_4_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_4_load_1_reg_2400 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_4_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_4_load_5_reg_2415 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_fu_1041_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_reg_2420 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_load_5_reg_2426 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_load_5_reg_2431 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_3_load_5_reg_2436 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_4_load_2_reg_2441 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_4_load_4_reg_2451 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp13_fu_1067_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp13_reg_2456 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_1_fu_1081_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_1_reg_2461 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_3_fu_1095_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_0_3_reg_2467 : STD_LOGIC_VECTOR (15 downto 0);
    signal lineBuff_val_4_load_3_reg_2472 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_2_fu_1110_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_2_reg_2477 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_4_fu_1125_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_0_4_reg_2483 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_3_fu_1140_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_3_reg_2488 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp15_fu_1165_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp15_reg_2494 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_4_fu_1179_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_4_reg_2499 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_1_fu_1193_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_1_1_reg_2505 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_5_fu_1208_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_5_reg_2510 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_2_fu_1222_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_1_2_reg_2516 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_6_fu_1237_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_6_reg_2521 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp17_fu_1257_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp17_reg_2527 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_7_fu_1271_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_7_reg_2532 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_4_fu_1285_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_1_4_reg_2538 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_8_fu_1300_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_8_reg_2543 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_0_fu_1314_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_0_reg_2549 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_9_fu_1329_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_9_reg_2554 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_1_fu_1343_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_1_reg_2560 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_23_fu_1358_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_23_reg_2565 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_fu_1372_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_2_reg_2571 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_10_fu_1387_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_10_reg_2576 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_3_fu_1401_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_3_reg_2582 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_11_fu_1416_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_11_reg_2587 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp6_fu_1436_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_reg_2593 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_12_fu_1450_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_12_reg_2598 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_3_0_fu_1464_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_3_0_reg_2604 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_13_fu_1479_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_13_reg_2609 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_3_1_fu_1493_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_3_1_reg_2615 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_14_fu_1508_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_14_reg_2620 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp9_fu_1533_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp9_reg_2626 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_15_fu_1547_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_15_reg_2631 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_3_3_fu_1561_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_3_3_reg_2637 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp10_fu_1571_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp10_reg_2642 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_16_fu_1585_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_16_reg_2647 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp20_fu_1605_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp20_reg_2653 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage22 : signal is "none";
    signal ap_block_state24_pp0_stage22_iter0 : BOOLEAN;
    signal ap_block_pp0_stage22_11001 : BOOLEAN;
    signal tmp_52_fu_1610_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_reg_2658 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_3_4_fu_1621_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_3_4_reg_2664 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp22_fu_1640_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp22_reg_2669 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_17_fu_1655_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_17_reg_2674 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_1680_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_reg_2680 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp23_fu_1689_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp23_reg_2685 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_18_fu_1703_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_18_reg_2690 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_4_1_fu_1717_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_4_1_reg_2696 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_19_fu_1732_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_19_reg_2701 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_4_2_fu_1746_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_4_2_reg_2707 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_20_fu_1761_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_20_reg_2712 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_1781_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_reg_2718 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_21_fu_1795_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_21_reg_2723 : STD_LOGIC_VECTOR (7 downto 0);
    signal valOutput_fu_1816_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal valOutput_reg_2729 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_reg_2734 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_2739 : STD_LOGIC_VECTOR (12 downto 0);
    signal sel_tmp_fu_1856_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp_reg_2744 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataOutSideChannel_d_fu_1926_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage24_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal lineBuff_val_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_0_ce0 : STD_LOGIC;
    signal lineBuff_val_0_we0 : STD_LOGIC;
    signal lineBuff_val_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_0_ce1 : STD_LOGIC;
    signal lineBuff_val_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_ce0 : STD_LOGIC;
    signal lineBuff_val_1_we0 : STD_LOGIC;
    signal lineBuff_val_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_ce1 : STD_LOGIC;
    signal lineBuff_val_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_ce0 : STD_LOGIC;
    signal lineBuff_val_2_we0 : STD_LOGIC;
    signal lineBuff_val_2_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_ce1 : STD_LOGIC;
    signal lineBuff_val_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_3_ce0 : STD_LOGIC;
    signal lineBuff_val_3_we0 : STD_LOGIC;
    signal lineBuff_val_3_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_3_ce1 : STD_LOGIC;
    signal lineBuff_val_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_4_ce0 : STD_LOGIC;
    signal lineBuff_val_4_we0 : STD_LOGIC;
    signal lineBuff_val_4_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_4_ce1 : STD_LOGIC;
    signal ap_phi_mux_idxRow_phi_fu_703_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_col_assign_phi_fu_714_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_pixProcessed_phi_fu_725_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_idxPixel_phi_fu_737_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4_01001 : BOOLEAN;
    signal ap_block_pp0_stage5_01001 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal ap_block_pp0_stage16 : BOOLEAN;
    signal ap_block_pp0_stage17 : BOOLEAN;
    signal ap_block_pp0_stage18 : BOOLEAN;
    signal ap_block_pp0_stage19 : BOOLEAN;
    signal ap_block_pp0_stage20 : BOOLEAN;
    signal ap_block_pp0_stage21 : BOOLEAN;
    signal ap_block_pp0_stage22 : BOOLEAN;
    signal ap_block_pp0_stage23 : BOOLEAN;
    signal ap_block_pp0_stage24 : BOOLEAN;
    signal tmp_1_fu_794_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_fu_810_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp4_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxRow_2_fu_844_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixProcessed_3_fu_891_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_fu_905_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp4_fu_916_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp7_fu_928_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixProcessed_1_fu_940_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_val_0_0_fu_969_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_0_fu_969_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_assign_1_0_2_fu_975_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_assign_1_0_3_fu_989_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_assign_1_0_4_fu_1003_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_val_0_1_fu_1026_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_1_fu_1026_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_1032_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_0_1_i_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_0_2_fu_1056_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_2_fu_1056_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_2_fu_1056_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp12_fu_1062_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_1072_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_0_2_i_fu_1076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_0_3_fu_1095_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_3_fu_1095_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_1101_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_0_3_i_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_0_4_fu_1125_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_4_fu_1125_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_fu_1131_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_0_4_i_fu_1135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_1_0_fu_1154_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_0_fu_1154_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_0_fu_1154_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp14_fu_1160_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_33_fu_1170_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_1_i_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_1_1_fu_1193_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_1_fu_1193_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_1199_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_1_1_i_fu_1203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_1_2_fu_1222_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_2_fu_1222_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_fu_1228_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_1_2_i_fu_1232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_1_3_fu_1251_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_3_fu_1251_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_3_fu_1251_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_fu_1262_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_1_3_i_fu_1266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_1_4_fu_1285_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_4_fu_1285_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_fu_1291_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_1_4_i_fu_1295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_2_0_fu_1314_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_0_fu_1314_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_fu_1320_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_2_i_fu_1324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_2_1_fu_1343_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_1_fu_1343_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_fu_1349_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_2_1_i_fu_1353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_2_2_fu_1372_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_fu_1372_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_fu_1378_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_2_2_i_fu_1382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_2_3_fu_1401_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_3_fu_1401_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_41_fu_1407_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_2_3_i_fu_1411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_2_4_fu_1430_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_4_fu_1430_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_4_fu_1430_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_fu_1441_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_2_4_i_fu_1445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_3_0_fu_1464_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_3_0_fu_1464_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_fu_1470_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_3_i_fu_1474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_3_1_fu_1493_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_3_1_fu_1493_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_fu_1499_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_3_1_i_fu_1503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_3_2_fu_1522_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_3_2_fu_1522_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_3_2_fu_1522_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_fu_1528_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_45_fu_1538_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_3_2_i_fu_1542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_3_3_fu_1561_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_3_3_fu_1561_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp7_fu_1567_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_46_fu_1576_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_3_3_i_fu_1580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_4_4_fu_1599_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_4_4_fu_1599_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_4_4_fu_1599_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_3_4_fu_1621_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_3_4_fu_1621_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp19_fu_1631_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp21_fu_1635_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp18_fu_1627_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_47_fu_1646_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_3_4_i_fu_1650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_4_0_fu_1669_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_4_0_fu_1669_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_4_0_fu_1669_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_fu_1675_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp16_fu_1685_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_48_fu_1694_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_4_i_fu_1698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_4_1_fu_1717_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_4_1_fu_1717_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_fu_1723_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_4_1_i_fu_1727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_4_2_fu_1746_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_4_2_fu_1746_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_fu_1752_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_4_2_i_fu_1756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_4_3_fu_1775_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_4_3_fu_1775_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_4_3_fu_1775_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_51_fu_1786_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_4_3_i_fu_1790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_1802_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_fu_1806_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp11_fu_1811_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_4_4_i_fu_1839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valInWindow_0_minVal_22_fu_1843_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp15_cast_fu_1849_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_tr_fu_1863_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_neg_fu_1866_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_fu_1872_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_5_cast_fu_1882_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_fu_1886_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_fu_1889_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_10_cast_fu_1895_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal valOutput_1_fu_1899_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_27_fu_1910_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1906_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_fu_1918_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_block_state33 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal window_val_0_0_fu_969_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_0_1_fu_1026_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_0_2_fu_1056_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_0_3_fu_1095_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_0_4_fu_1125_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_1_0_fu_1154_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_1_1_fu_1193_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_1_2_fu_1222_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_1_3_fu_1251_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_1_4_fu_1285_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_0_fu_1314_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_1_fu_1343_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_2_fu_1372_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_3_fu_1401_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_4_fu_1430_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_3_0_fu_1464_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_3_1_fu_1493_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_3_2_fu_1522_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_3_3_fu_1561_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_3_4_fu_1621_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_4_0_fu_1669_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_4_1_fu_1717_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_4_2_fu_1746_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_4_3_fu_1775_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_4_4_fu_1599_p00 : STD_LOGIC_VECTOR (15 downto 0);

    component doImgProc_lineBufbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component doImgProc_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        operation : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component doImgProc_KERNEL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        kernel_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        kernel_ce0 : IN STD_LOGIC;
        kernel_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    doImgProc_CRTL_BUS_s_axi_U : component doImgProc_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        operation => operation);

    doImgProc_KERNEL_BUS_s_axi_U : component doImgProc_KERNEL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_KERNEL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_KERNEL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_KERNEL_BUS_AWVALID,
        AWREADY => s_axi_KERNEL_BUS_AWREADY,
        AWADDR => s_axi_KERNEL_BUS_AWADDR,
        WVALID => s_axi_KERNEL_BUS_WVALID,
        WREADY => s_axi_KERNEL_BUS_WREADY,
        WDATA => s_axi_KERNEL_BUS_WDATA,
        WSTRB => s_axi_KERNEL_BUS_WSTRB,
        ARVALID => s_axi_KERNEL_BUS_ARVALID,
        ARREADY => s_axi_KERNEL_BUS_ARREADY,
        ARADDR => s_axi_KERNEL_BUS_ARADDR,
        RVALID => s_axi_KERNEL_BUS_RVALID,
        RREADY => s_axi_KERNEL_BUS_RREADY,
        RDATA => s_axi_KERNEL_BUS_RDATA,
        RRESP => s_axi_KERNEL_BUS_RRESP,
        BVALID => s_axi_KERNEL_BUS_BVALID,
        BREADY => s_axi_KERNEL_BUS_BREADY,
        BRESP => s_axi_KERNEL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        kernel_address0 => kernel_address0,
        kernel_ce0 => kernel_ce0,
        kernel_q0 => kernel_q0);

    lineBuff_val_0_U : component doImgProc_lineBufbkb
    generic map (
        DataWidth => 8,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lineBuff_val_0_address0,
        ce0 => lineBuff_val_0_ce0,
        we0 => lineBuff_val_0_we0,
        d0 => lineBuff_val_1_q0,
        q0 => lineBuff_val_0_q0,
        address1 => lineBuff_val_0_address1,
        ce1 => lineBuff_val_0_ce1,
        q1 => lineBuff_val_0_q1);

    lineBuff_val_1_U : component doImgProc_lineBufbkb
    generic map (
        DataWidth => 8,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lineBuff_val_1_address0,
        ce0 => lineBuff_val_1_ce0,
        we0 => lineBuff_val_1_we0,
        d0 => lineBuff_val_2_q0,
        q0 => lineBuff_val_1_q0,
        address1 => lineBuff_val_1_address1,
        ce1 => lineBuff_val_1_ce1,
        q1 => lineBuff_val_1_q1);

    lineBuff_val_2_U : component doImgProc_lineBufbkb
    generic map (
        DataWidth => 8,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lineBuff_val_2_address0,
        ce0 => lineBuff_val_2_ce0,
        we0 => lineBuff_val_2_we0,
        d0 => lineBuff_val_3_q0,
        q0 => lineBuff_val_2_q0,
        address1 => lineBuff_val_2_address1,
        ce1 => lineBuff_val_2_ce1,
        q1 => lineBuff_val_2_q1);

    lineBuff_val_3_U : component doImgProc_lineBufbkb
    generic map (
        DataWidth => 8,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lineBuff_val_3_address0,
        ce0 => lineBuff_val_3_ce0,
        we0 => lineBuff_val_3_we0,
        d0 => lineBuff_val_4_q0,
        q0 => lineBuff_val_3_q0,
        address1 => lineBuff_val_3_address1,
        ce1 => lineBuff_val_3_ce1,
        q1 => lineBuff_val_3_q1);

    lineBuff_val_4_U : component doImgProc_lineBufbkb
    generic map (
        DataWidth => 8,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lineBuff_val_4_address0,
        ce0 => lineBuff_val_4_ce0,
        we0 => lineBuff_val_4_we0,
        d0 => inStream_V_data_V_0_data_out,
        q0 => lineBuff_val_4_q0,
        address1 => lineBuff_val_4_address1,
        ce1 => lineBuff_val_4_ce1,
        q1 => lineBuff_val_4_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_subdone))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_data_V_0_ack_out = ap_const_logic_1) and (inStream_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_data_V_0_sel_rd <= not(inStream_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_data_V_0_ack_in = ap_const_logic_1) and (inStream_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_data_V_0_sel_wr <= not(inStream_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_data_V_0_state = ap_const_lv2_2) and (inStream_V_data_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_data_V_0_state = ap_const_lv2_3) and (inStream_V_data_V_0_vld_in = ap_const_logic_0) and (inStream_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_data_V_0_state = ap_const_lv2_1) and (inStream_V_data_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_data_V_0_state = ap_const_lv2_3) and (inStream_V_data_V_0_ack_out = ap_const_logic_0) and (inStream_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_data_V_0_vld_in = ap_const_logic_0) and (inStream_V_data_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_data_V_0_ack_out = ap_const_logic_0) and (inStream_V_data_V_0_vld_in = ap_const_logic_1))) and (inStream_V_data_V_0_state = ap_const_lv2_3)) or ((inStream_V_data_V_0_state = ap_const_lv2_1) and (inStream_V_data_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_data_V_0_state = ap_const_lv2_2) and (inStream_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_dest_V_0_ack_out = ap_const_logic_1) and (inStream_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_dest_V_0_sel_rd <= not(inStream_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_dest_V_0_ack_in = ap_const_logic_1) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_dest_V_0_sel_wr <= not(inStream_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_dest_V_0_state = ap_const_lv2_2) and (inStream_V_dest_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_dest_V_0_state = ap_const_lv2_3) and (inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_dest_V_0_state = ap_const_lv2_1) and (inStream_V_dest_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_dest_V_0_state = ap_const_lv2_3) and (inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1))) and (inStream_V_dest_V_0_state = ap_const_lv2_3)) or ((inStream_V_dest_V_0_state = ap_const_lv2_1) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_dest_V_0_state = ap_const_lv2_2) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_keep_V_0_ack_out = ap_const_logic_1) and (inStream_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_keep_V_0_sel_rd <= not(inStream_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_keep_V_0_ack_in = ap_const_logic_1) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_keep_V_0_sel_wr <= not(inStream_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_keep_V_0_state = ap_const_lv2_2) and (inStream_V_keep_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_keep_V_0_state = ap_const_lv2_3) and (inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_keep_V_0_state = ap_const_lv2_1) and (inStream_V_keep_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_keep_V_0_state = ap_const_lv2_3) and (inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1))) and (inStream_V_keep_V_0_state = ap_const_lv2_3)) or ((inStream_V_keep_V_0_state = ap_const_lv2_1) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_keep_V_0_state = ap_const_lv2_2) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_last_V_0_ack_out = ap_const_logic_1) and (inStream_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_last_V_0_sel_rd <= not(inStream_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_last_V_0_ack_in = ap_const_logic_1) and (inStream_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_last_V_0_sel_wr <= not(inStream_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_last_V_0_state = ap_const_lv2_2) and (inStream_V_last_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_last_V_0_state = ap_const_lv2_3) and (inStream_V_last_V_0_vld_in = ap_const_logic_0) and (inStream_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_last_V_0_state = ap_const_lv2_1) and (inStream_V_last_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_last_V_0_state = ap_const_lv2_3) and (inStream_V_last_V_0_ack_out = ap_const_logic_0) and (inStream_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_last_V_0_vld_in = ap_const_logic_0) and (inStream_V_last_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_last_V_0_ack_out = ap_const_logic_0) and (inStream_V_last_V_0_vld_in = ap_const_logic_1))) and (inStream_V_last_V_0_state = ap_const_lv2_3)) or ((inStream_V_last_V_0_state = ap_const_lv2_1) and (inStream_V_last_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_last_V_0_state = ap_const_lv2_2) and (inStream_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_strb_V_0_ack_out = ap_const_logic_1) and (inStream_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_strb_V_0_sel_rd <= not(inStream_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_strb_V_0_ack_in = ap_const_logic_1) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_strb_V_0_sel_wr <= not(inStream_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_strb_V_0_state = ap_const_lv2_2) and (inStream_V_strb_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_strb_V_0_state = ap_const_lv2_3) and (inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_strb_V_0_state = ap_const_lv2_1) and (inStream_V_strb_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_strb_V_0_state = ap_const_lv2_3) and (inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1))) and (inStream_V_strb_V_0_state = ap_const_lv2_3)) or ((inStream_V_strb_V_0_state = ap_const_lv2_1) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_strb_V_0_state = ap_const_lv2_2) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_user_V_0_ack_out = ap_const_logic_1) and (inStream_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_user_V_0_sel_rd <= not(inStream_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_user_V_0_ack_in = ap_const_logic_1) and (inStream_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_user_V_0_sel_wr <= not(inStream_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_user_V_0_state = ap_const_lv2_2) and (inStream_V_user_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_user_V_0_state = ap_const_lv2_3) and (inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_user_V_0_state = ap_const_lv2_1) and (inStream_V_user_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_user_V_0_state = ap_const_lv2_3) and (inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_vld_in = ap_const_logic_1))) and (inStream_V_user_V_0_state = ap_const_lv2_3)) or ((inStream_V_user_V_0_state = ap_const_lv2_1) and (inStream_V_user_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_user_V_0_state = ap_const_lv2_2) and (inStream_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_data_V_1_ack_out = ap_const_logic_1) and (outStream_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_data_V_1_sel_rd <= not(outStream_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (outStream_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_data_V_1_sel_wr <= not(outStream_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_data_V_1_state = ap_const_lv2_2) and (outStream_V_data_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_data_V_1_state = ap_const_lv2_3) and (outStream_V_data_V_1_vld_in = ap_const_logic_0) and (outStream_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_data_V_1_state = ap_const_lv2_1) and (outStream_V_data_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_data_V_1_state = ap_const_lv2_3) and (outStream_V_data_V_1_ack_out = ap_const_logic_0) and (outStream_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_data_V_1_vld_in = ap_const_logic_0) and (outStream_V_data_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_data_V_1_ack_out = ap_const_logic_0) and (outStream_V_data_V_1_vld_in = ap_const_logic_1))) and (outStream_V_data_V_1_state = ap_const_lv2_3)) or ((outStream_V_data_V_1_state = ap_const_lv2_1) and (outStream_V_data_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_data_V_1_state = ap_const_lv2_2) and (outStream_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_out = ap_const_logic_1) and (outStream_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_rd <= not(outStream_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_in = ap_const_logic_1) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_wr <= not(outStream_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_V_dest_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_V_dest_V_1_ack_out = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_dest_V_1_ack_out = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) and (outStream_V_dest_V_1_state = ap_const_lv2_3)) or ((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_out = ap_const_logic_1) and (outStream_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_rd <= not(outStream_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_V_id_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_V_id_V_1_ack_out = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_id_V_1_ack_out = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) and (outStream_V_id_V_1_state = ap_const_lv2_3)) or ((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_out = ap_const_logic_1) and (outStream_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_rd <= not(outStream_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_in = ap_const_logic_1) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_wr <= not(outStream_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_V_keep_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_V_keep_V_1_ack_out = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_keep_V_1_ack_out = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) and (outStream_V_keep_V_1_state = ap_const_lv2_3)) or ((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_out = ap_const_logic_1) and (outStream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_rd <= not(outStream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_in = ap_const_logic_1) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_wr <= not(outStream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_V_last_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_V_last_V_1_ack_out = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_last_V_1_ack_out = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) and (outStream_V_last_V_1_state = ap_const_lv2_3)) or ((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_out = ap_const_logic_1) and (outStream_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_rd <= not(outStream_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_in = ap_const_logic_1) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_wr <= not(outStream_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_V_strb_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_V_strb_V_1_ack_out = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_strb_V_1_ack_out = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) and (outStream_V_strb_V_1_state = ap_const_lv2_3)) or ((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_out = ap_const_logic_1) and (outStream_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_rd <= not(outStream_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_in = ap_const_logic_1) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_wr <= not(outStream_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_V_user_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_V_user_V_1_ack_out = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_user_V_1_ack_out = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) and (outStream_V_user_V_1_state = ap_const_lv2_3)) or ((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    col_assign_reg_710_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                col_assign_reg_710 <= idxCol_1_reg_2221;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                col_assign_reg_710 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    idxPixel_reg_733_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                idxPixel_reg_733 <= idxPixel_1_reg_2077;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                idxPixel_reg_733 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    idxRow_reg_699_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                idxRow_reg_699 <= idxRow_1_reg_2126;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                idxRow_reg_699 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    pixProcessed_reg_721_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                pixProcessed_reg_721 <= pixProcessed_2_reg_2226;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                pixProcessed_reg_721 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond1_reg_2073 <= exitcond1_fu_774_p2;
                exitcond1_reg_2073_pp0_iter1_reg <= exitcond1_reg_2073;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                idxCol_1_reg_2221 <= idxCol_1_fu_948_p3;
                pixProcessed_2_reg_2226 <= pixProcessed_2_fu_954_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_774_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                idxCol_reg_2121 <= idxCol_fu_838_p2;
                lineBuff_val_1_addr_reg_2087 <= tmp_s_fu_786_p1(8 - 1 downto 0);
                lineBuff_val_2_addr_reg_2092 <= tmp_s_fu_786_p1(8 - 1 downto 0);
                lineBuff_val_3_addr_reg_2097 <= tmp_s_fu_786_p1(8 - 1 downto 0);
                lineBuff_val_4_addr_reg_2102 <= tmp_s_fu_786_p1(8 - 1 downto 0);
                or_cond_reg_2107 <= or_cond_fu_826_p2;
                tmp_6_reg_2115 <= tmp_6_fu_832_p2;
                    tmp_s_reg_2082(31 downto 0) <= tmp_s_fu_786_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                idxPixel_1_reg_2077 <= idxPixel_1_fu_780_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_774_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                idxRow_1_reg_2126 <= idxRow_1_fu_850_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_data_V_0_load_A = ap_const_logic_1)) then
                inStream_V_data_V_0_payload_A <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_data_V_0_load_B = ap_const_logic_1)) then
                inStream_V_data_V_0_payload_B <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_dest_V_0_load_A = ap_const_logic_1)) then
                inStream_V_dest_V_0_payload_A <= inStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_dest_V_0_load_B = ap_const_logic_1)) then
                inStream_V_dest_V_0_payload_B <= inStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_keep_V_0_load_A = ap_const_logic_1)) then
                inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_keep_V_0_load_B = ap_const_logic_1)) then
                inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_last_V_0_load_A = ap_const_logic_1)) then
                inStream_V_last_V_0_payload_A <= inStream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_last_V_0_load_B = ap_const_logic_1)) then
                inStream_V_last_V_0_payload_B <= inStream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_strb_V_0_load_A = ap_const_logic_1)) then
                inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_strb_V_0_load_B = ap_const_logic_1)) then
                inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_user_V_0_load_A = ap_const_logic_1)) then
                inStream_V_user_V_0_payload_A <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_user_V_0_load_B = ap_const_logic_1)) then
                inStream_V_user_V_0_payload_B <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                lineBuff_val_0_load_3_reg_2345 <= lineBuff_val_0_q0;
                lineBuff_val_1_load_3_reg_2355 <= lineBuff_val_1_q1;
                lineBuff_val_1_load_4_reg_2360 <= lineBuff_val_1_q0;
                lineBuff_val_2_load_3_reg_2370 <= lineBuff_val_2_q1;
                lineBuff_val_2_load_4_reg_2375 <= lineBuff_val_2_q0;
                lineBuff_val_3_load_3_reg_2385 <= lineBuff_val_3_q1;
                lineBuff_val_3_load_4_reg_2390 <= lineBuff_val_3_q0;
                lineBuff_val_4_load_1_reg_2400 <= lineBuff_val_4_q0;
                lineBuff_val_4_load_5_reg_2415 <= lineBuff_val_4_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                lineBuff_val_1_load_1_reg_2264 <= lineBuff_val_1_q0;
                lineBuff_val_1_load_2_reg_2269 <= lineBuff_val_1_q1;
                lineBuff_val_2_load_1_reg_2284 <= lineBuff_val_2_q0;
                lineBuff_val_2_load_2_reg_2289 <= lineBuff_val_2_q1;
                lineBuff_val_3_load_1_reg_2304 <= lineBuff_val_3_q0;
                lineBuff_val_3_load_2_reg_2309 <= lineBuff_val_3_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then
                lineBuff_val_1_load_5_reg_2426 <= lineBuff_val_1_q1;
                lineBuff_val_2_load_5_reg_2431 <= lineBuff_val_2_q1;
                lineBuff_val_3_load_5_reg_2436 <= lineBuff_val_3_q1;
                lineBuff_val_4_load_2_reg_2441 <= lineBuff_val_4_q1;
                lineBuff_val_4_load_4_reg_2451 <= lineBuff_val_4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then
                lineBuff_val_4_load_3_reg_2472 <= lineBuff_val_4_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_V_1_load_A = ap_const_logic_1)) then
                outStream_V_data_V_1_payload_A <= dataOutSideChannel_d_fu_1926_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_V_1_load_B = ap_const_logic_1)) then
                outStream_V_data_V_1_payload_B <= dataOutSideChannel_d_fu_1926_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_A = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_A <= tmp_dest_V_reg_2151_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_B = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_B <= tmp_dest_V_reg_2151_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_A = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_A <= tmp_keep_V_reg_2131_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_B = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_B <= tmp_keep_V_reg_2131_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_A = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_A <= tmp_last_V_reg_2146_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_B = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_B <= tmp_last_V_reg_2146_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_A = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_A <= tmp_strb_V_reg_2136_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_B = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_B <= tmp_strb_V_reg_2136_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_A = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_A <= tmp_user_V_reg_2141_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_B = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_B <= tmp_user_V_reg_2141_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then
                reg_744 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then
                reg_748 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then
                reg_752 <= lineBuff_val_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                sel_tmp2_reg_2058 <= sel_tmp2_fu_756_p2;
                sel_tmp5_reg_2063 <= sel_tmp5_fu_762_p2;
                sel_tmp8_reg_2068 <= sel_tmp8_fu_768_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                sel_tmp3_reg_2206 <= sel_tmp3_fu_912_p2;
                sel_tmp6_reg_2211 <= sel_tmp6_fu_924_p2;
                sel_tmp9_reg_2216 <= sel_tmp9_fu_936_p2;
                    tmp_27_0_1_reg_2166(31 downto 0) <= tmp_27_0_1_fu_897_p1(31 downto 0);
                    tmp_5_reg_2156(31 downto 0) <= tmp_5_fu_883_p1(31 downto 0);
                tmp_dest_V_reg_2151 <= inStream_V_dest_V_0_data_out;
                tmp_keep_V_reg_2131 <= inStream_V_keep_V_0_data_out;
                tmp_last_V_reg_2146 <= inStream_V_last_V_0_data_out;
                tmp_strb_V_reg_2136 <= inStream_V_strb_V_0_data_out;
                tmp_user_V_reg_2141 <= inStream_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                sel_tmp3_reg_2206_pp0_iter1_reg <= sel_tmp3_reg_2206;
                sel_tmp6_reg_2211_pp0_iter1_reg <= sel_tmp6_reg_2211;
                sel_tmp9_reg_2216_pp0_iter1_reg <= sel_tmp9_reg_2216;
                tmp_dest_V_reg_2151_pp0_iter1_reg <= tmp_dest_V_reg_2151;
                tmp_keep_V_reg_2131_pp0_iter1_reg <= tmp_keep_V_reg_2131;
                tmp_last_V_reg_2146_pp0_iter1_reg <= tmp_last_V_reg_2146;
                tmp_strb_V_reg_2136_pp0_iter1_reg <= tmp_strb_V_reg_2136;
                tmp_user_V_reg_2141_pp0_iter1_reg <= tmp_user_V_reg_2141;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (sel_tmp9_reg_2216_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                sel_tmp_reg_2744 <= sel_tmp_fu_1856_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp9_reg_2216 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001))) then
                tmp10_reg_2642 <= tmp10_fu_1571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp9_reg_2216 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then
                tmp13_reg_2456 <= tmp13_fu_1067_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp9_reg_2216 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001))) then
                tmp15_reg_2494 <= tmp15_fu_1165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp9_reg_2216 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001))) then
                tmp17_reg_2527 <= tmp17_fu_1257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp9_reg_2216 = ap_const_lv1_1) and (exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp1_reg_2718 <= tmp1_fu_1781_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp9_reg_2216 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001))) then
                tmp20_reg_2653 <= tmp20_fu_1605_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp9_reg_2216 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_11001))) then
                tmp22_reg_2669 <= tmp22_fu_1640_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp9_reg_2216 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001))) then
                tmp23_reg_2685 <= tmp23_fu_1689_p2;
                tmp4_reg_2680 <= tmp4_fu_1680_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp9_reg_2216 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001))) then
                tmp6_reg_2593 <= tmp6_fu_1436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp9_reg_2216 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001))) then
                tmp9_reg_2626 <= tmp9_fu_1533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp9_reg_2216_pp0_iter1_reg = ap_const_lv1_1) and (exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp_25_reg_2734 <= valOutput_fu_1816_p2(15 downto 15);
                tmp_7_reg_2739 <= valOutput_fu_1816_p2(15 downto 3);
                valOutput_reg_2729 <= valOutput_fu_1816_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                    tmp_27_0_2_reg_2236(31 downto 0) <= tmp_27_0_2_fu_981_p1(31 downto 0);
                    tmp_27_0_3_reg_2246(31 downto 0) <= tmp_27_0_3_fu_995_p1(31 downto 0);
                    tmp_27_0_4_reg_2256(31 downto 0) <= tmp_27_0_4_fu_1009_p1(31 downto 0);
                window_val_0_0_reg_2231 <= window_val_0_0_fu_969_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp_28_reg_2334 <= tmp_28_fu_1014_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001))) then
                tmp_52_reg_2658 <= tmp_52_fu_1610_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001))) then
                valInWindow_0_minVal_10_reg_2576 <= valInWindow_0_minVal_10_fu_1387_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001))) then
                valInWindow_0_minVal_11_reg_2587 <= valInWindow_0_minVal_11_fu_1416_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001))) then
                valInWindow_0_minVal_12_reg_2598 <= valInWindow_0_minVal_12_fu_1450_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001))) then
                valInWindow_0_minVal_13_reg_2609 <= valInWindow_0_minVal_13_fu_1479_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19_11001))) then
                valInWindow_0_minVal_14_reg_2620 <= valInWindow_0_minVal_14_fu_1508_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001))) then
                valInWindow_0_minVal_15_reg_2631 <= valInWindow_0_minVal_15_fu_1547_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001))) then
                valInWindow_0_minVal_16_reg_2647 <= valInWindow_0_minVal_16_fu_1585_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_11001))) then
                valInWindow_0_minVal_17_reg_2674 <= valInWindow_0_minVal_17_fu_1655_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001))) then
                valInWindow_0_minVal_18_reg_2690 <= valInWindow_0_minVal_18_fu_1703_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                valInWindow_0_minVal_19_reg_2701 <= valInWindow_0_minVal_19_fu_1732_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then
                valInWindow_0_minVal_1_reg_2461 <= valInWindow_0_minVal_1_fu_1081_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                valInWindow_0_minVal_20_reg_2712 <= valInWindow_0_minVal_20_fu_1761_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                valInWindow_0_minVal_21_reg_2723 <= valInWindow_0_minVal_21_fu_1795_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001))) then
                valInWindow_0_minVal_23_reg_2565 <= valInWindow_0_minVal_23_fu_1358_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then
                valInWindow_0_minVal_2_reg_2477 <= valInWindow_0_minVal_2_fu_1110_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001))) then
                valInWindow_0_minVal_3_reg_2488 <= valInWindow_0_minVal_3_fu_1140_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001))) then
                valInWindow_0_minVal_4_reg_2499 <= valInWindow_0_minVal_4_fu_1179_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001))) then
                valInWindow_0_minVal_5_reg_2510 <= valInWindow_0_minVal_5_fu_1208_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001))) then
                valInWindow_0_minVal_6_reg_2521 <= valInWindow_0_minVal_6_fu_1237_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001))) then
                valInWindow_0_minVal_7_reg_2532 <= valInWindow_0_minVal_7_fu_1271_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001))) then
                valInWindow_0_minVal_8_reg_2543 <= valInWindow_0_minVal_8_fu_1300_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001))) then
                valInWindow_0_minVal_9_reg_2554 <= valInWindow_0_minVal_9_fu_1329_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sel_tmp6_reg_2211 = ap_const_lv1_1) and (exitcond1_reg_2073 = ap_const_lv1_0) and (sel_tmp9_reg_2216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                valInWindow_0_minVal_reg_2420 <= valInWindow_0_minVal_fu_1041_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                window_val_0_1_reg_2340 <= window_val_0_1_fu_1026_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then
                window_val_0_3_reg_2467 <= window_val_0_3_fu_1095_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001))) then
                window_val_0_4_reg_2483 <= window_val_0_4_fu_1125_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001))) then
                window_val_1_1_reg_2505 <= window_val_1_1_fu_1193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001))) then
                window_val_1_2_reg_2516 <= window_val_1_2_fu_1222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001))) then
                window_val_1_4_reg_2538 <= window_val_1_4_fu_1285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001))) then
                window_val_2_0_reg_2549 <= window_val_2_0_fu_1314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001))) then
                window_val_2_1_reg_2560 <= window_val_2_1_fu_1343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001))) then
                window_val_2_2_reg_2571 <= window_val_2_2_fu_1372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001))) then
                window_val_2_3_reg_2582 <= window_val_2_3_fu_1401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001))) then
                window_val_3_0_reg_2604 <= window_val_3_0_fu_1464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19_11001))) then
                window_val_3_1_reg_2615 <= window_val_3_1_fu_1493_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001))) then
                window_val_3_3_reg_2637 <= window_val_3_3_fu_1561_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_11001))) then
                window_val_3_4_reg_2664 <= window_val_3_4_fu_1621_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                window_val_4_1_reg_2696 <= window_val_4_1_fu_1717_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                window_val_4_2_reg_2707 <= window_val_4_2_fu_1746_p2;
            end if;
        end if;
    end process;
    tmp_s_reg_2082(63 downto 32) <= "00000000000000000000000000000000";
    tmp_5_reg_2156(63 downto 32) <= "00000000000000000000000000000000";
    tmp_27_0_1_reg_2166(63 downto 32) <= "00000000000000000000000000000000";
    tmp_27_0_2_reg_2236(63 downto 32) <= "00000000000000000000000000000000";
    tmp_27_0_3_reg_2246(63 downto 32) <= "00000000000000000000000000000000";
    tmp_27_0_4_reg_2256(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, exitcond1_fu_774_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage24_subdone, ap_block_pp0_stage5_subdone, ap_CS_fsm_state33, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone, ap_block_pp0_stage23_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (exitcond1_fu_774_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (exitcond1_fu_774_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_pp0_stage24 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage24_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                end if;
            when ap_ST_fsm_state33 => 
                if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage17 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage18 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage19 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage20 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage21 <= ap_CS_fsm(22);
    ap_CS_fsm_pp0_stage22 <= ap_CS_fsm(23);
    ap_CS_fsm_pp0_stage23 <= ap_CS_fsm(24);
    ap_CS_fsm_pp0_stage24 <= ap_CS_fsm(25);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state33 <= ap_CS_fsm(26);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(inStream_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, exitcond1_reg_2073)
    begin
                ap_block_pp0_stage2_11001 <= ((exitcond1_reg_2073 = ap_const_lv1_0) and (inStream_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(inStream_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, exitcond1_reg_2073)
    begin
                ap_block_pp0_stage2_subdone <= ((exitcond1_reg_2073 = ap_const_lv1_0) and (inStream_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state31_io)
    begin
                ap_block_pp0_stage4_11001 <= ((ap_const_boolean_1 = ap_block_state31_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state31_io)
    begin
                ap_block_pp0_stage4_subdone <= ((ap_const_boolean_1 = ap_block_state31_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state32_io)
    begin
                ap_block_pp0_stage5_11001 <= ((ap_const_boolean_1 = ap_block_state32_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state32_io)
    begin
                ap_block_pp0_stage5_subdone <= ((ap_const_boolean_1 = ap_block_state32_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage21_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage22_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage23_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage24_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state31_io_assign_proc : process(outStream_V_data_V_1_ack_in, exitcond1_reg_2073_pp0_iter1_reg)
    begin
                ap_block_state31_io <= ((exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (outStream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state31_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state32_io_assign_proc : process(outStream_V_data_V_1_ack_in, exitcond1_reg_2073_pp0_iter1_reg)
    begin
                ap_block_state32_io <= ((exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (outStream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state32_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in)
    begin
                ap_block_state33 <= ((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage2_iter0_assign_proc : process(inStream_V_data_V_0_vld_out, exitcond1_reg_2073)
    begin
                ap_block_state4_pp0_stage2_iter0 <= ((exitcond1_reg_2073 = ap_const_lv1_0) and (inStream_V_data_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond1_fu_774_p2)
    begin
        if ((exitcond1_fu_774_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state33)
    begin
        if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_col_assign_phi_fu_714_p4_assign_proc : process(exitcond1_reg_2073, ap_enable_reg_pp0_iter1, col_assign_reg_710, ap_CS_fsm_pp0_stage0, idxCol_1_reg_2221, ap_block_pp0_stage0)
    begin
        if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_col_assign_phi_fu_714_p4 <= idxCol_1_reg_2221;
        else 
            ap_phi_mux_col_assign_phi_fu_714_p4 <= col_assign_reg_710;
        end if; 
    end process;


    ap_phi_mux_idxPixel_phi_fu_737_p4_assign_proc : process(exitcond1_reg_2073, ap_enable_reg_pp0_iter1, idxPixel_reg_733, ap_CS_fsm_pp0_stage0, idxPixel_1_reg_2077, ap_block_pp0_stage0)
    begin
        if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_idxPixel_phi_fu_737_p4 <= idxPixel_1_reg_2077;
        else 
            ap_phi_mux_idxPixel_phi_fu_737_p4 <= idxPixel_reg_733;
        end if; 
    end process;


    ap_phi_mux_idxRow_phi_fu_703_p4_assign_proc : process(exitcond1_reg_2073, ap_enable_reg_pp0_iter1, idxRow_reg_699, ap_CS_fsm_pp0_stage0, idxRow_1_reg_2126, ap_block_pp0_stage0)
    begin
        if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_idxRow_phi_fu_703_p4 <= idxRow_1_reg_2126;
        else 
            ap_phi_mux_idxRow_phi_fu_703_p4 <= idxRow_reg_699;
        end if; 
    end process;


    ap_phi_mux_pixProcessed_phi_fu_725_p4_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_enable_reg_pp0_iter1, exitcond1_reg_2073_pp0_iter1_reg, pixProcessed_reg_721, pixProcessed_2_reg_2226)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_phi_mux_pixProcessed_phi_fu_725_p4 <= pixProcessed_2_reg_2226;
        else 
            ap_phi_mux_pixProcessed_phi_fu_725_p4 <= pixProcessed_reg_721;
        end if; 
    end process;


    ap_ready_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state33)
    begin
        if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    col_assign_1_0_2_fu_975_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(pixProcessed_reg_721));
    col_assign_1_0_3_fu_989_p2 <= std_logic_vector(unsigned(ap_const_lv32_3) + unsigned(pixProcessed_reg_721));
    col_assign_1_0_4_fu_1003_p2 <= std_logic_vector(unsigned(ap_const_lv32_4) + unsigned(pixProcessed_reg_721));
    dataOutSideChannel_d_fu_1926_p3 <= 
        p_s_fu_1918_p3 when (sel_tmp9_reg_2216_pp0_iter1_reg(0) = '1') else 
        sel_tmp_reg_2744;
    exitcond1_fu_774_p2 <= "1" when (ap_phi_mux_idxPixel_phi_fu_737_p4 = ap_const_lv17_12C00) else "0";
    icmp4_fu_820_p2 <= "1" when (signed(tmp_2_fu_810_p4) > signed(ap_const_lv30_0)) else "0";
    icmp_fu_804_p2 <= "1" when (signed(tmp_1_fu_794_p4) > signed(ap_const_lv30_0)) else "0";
    idxCol_1_fu_948_p3 <= 
        idxCol_reg_2121 when (tmp_6_reg_2115(0) = '1') else 
        ap_const_lv32_0;
    idxCol_fu_838_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_col_assign_phi_fu_714_p4));
    idxPixel_1_fu_780_p2 <= std_logic_vector(unsigned(ap_phi_mux_idxPixel_phi_fu_737_p4) + unsigned(ap_const_lv17_1));
    idxRow_1_fu_850_p3 <= 
        ap_phi_mux_idxRow_phi_fu_703_p4 when (tmp_6_fu_832_p2(0) = '1') else 
        idxRow_2_fu_844_p2;
    idxRow_2_fu_844_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_idxRow_phi_fu_703_p4));

    inStream_TDATA_blk_n_assign_proc : process(inStream_V_data_V_0_state, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2, exitcond1_reg_2073)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            inStream_TDATA_blk_n <= inStream_V_data_V_0_state(0);
        else 
            inStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inStream_TREADY <= inStream_V_dest_V_0_state(1);
    inStream_V_data_V_0_ack_in <= inStream_V_data_V_0_state(1);

    inStream_V_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, exitcond1_reg_2073, ap_block_pp0_stage2_11001)
    begin
        if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            inStream_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_data_V_0_data_out_assign_proc : process(inStream_V_data_V_0_payload_A, inStream_V_data_V_0_payload_B, inStream_V_data_V_0_sel)
    begin
        if ((inStream_V_data_V_0_sel = ap_const_logic_1)) then 
            inStream_V_data_V_0_data_out <= inStream_V_data_V_0_payload_B;
        else 
            inStream_V_data_V_0_data_out <= inStream_V_data_V_0_payload_A;
        end if; 
    end process;

    inStream_V_data_V_0_load_A <= (inStream_V_data_V_0_state_cmp_full and not(inStream_V_data_V_0_sel_wr));
    inStream_V_data_V_0_load_B <= (inStream_V_data_V_0_state_cmp_full and inStream_V_data_V_0_sel_wr);
    inStream_V_data_V_0_sel <= inStream_V_data_V_0_sel_rd;
    inStream_V_data_V_0_state_cmp_full <= '0' when (inStream_V_data_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_data_V_0_vld_in <= inStream_TVALID;
    inStream_V_data_V_0_vld_out <= inStream_V_data_V_0_state(0);
    inStream_V_dest_V_0_ack_in <= inStream_V_dest_V_0_state(1);

    inStream_V_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, exitcond1_reg_2073, ap_block_pp0_stage2_11001)
    begin
        if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_dest_V_0_data_out_assign_proc : process(inStream_V_dest_V_0_payload_A, inStream_V_dest_V_0_payload_B, inStream_V_dest_V_0_sel)
    begin
        if ((inStream_V_dest_V_0_sel = ap_const_logic_1)) then 
            inStream_V_dest_V_0_data_out <= inStream_V_dest_V_0_payload_B;
        else 
            inStream_V_dest_V_0_data_out <= inStream_V_dest_V_0_payload_A;
        end if; 
    end process;

    inStream_V_dest_V_0_load_A <= (inStream_V_dest_V_0_state_cmp_full and not(inStream_V_dest_V_0_sel_wr));
    inStream_V_dest_V_0_load_B <= (inStream_V_dest_V_0_state_cmp_full and inStream_V_dest_V_0_sel_wr);
    inStream_V_dest_V_0_sel <= inStream_V_dest_V_0_sel_rd;
    inStream_V_dest_V_0_state_cmp_full <= '0' when (inStream_V_dest_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_dest_V_0_vld_in <= inStream_TVALID;
    inStream_V_dest_V_0_vld_out <= inStream_V_dest_V_0_state(0);
    inStream_V_keep_V_0_ack_in <= inStream_V_keep_V_0_state(1);

    inStream_V_keep_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, exitcond1_reg_2073, ap_block_pp0_stage2_11001)
    begin
        if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            inStream_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_keep_V_0_data_out_assign_proc : process(inStream_V_keep_V_0_payload_A, inStream_V_keep_V_0_payload_B, inStream_V_keep_V_0_sel)
    begin
        if ((inStream_V_keep_V_0_sel = ap_const_logic_1)) then 
            inStream_V_keep_V_0_data_out <= inStream_V_keep_V_0_payload_B;
        else 
            inStream_V_keep_V_0_data_out <= inStream_V_keep_V_0_payload_A;
        end if; 
    end process;

    inStream_V_keep_V_0_load_A <= (inStream_V_keep_V_0_state_cmp_full and not(inStream_V_keep_V_0_sel_wr));
    inStream_V_keep_V_0_load_B <= (inStream_V_keep_V_0_state_cmp_full and inStream_V_keep_V_0_sel_wr);
    inStream_V_keep_V_0_sel <= inStream_V_keep_V_0_sel_rd;
    inStream_V_keep_V_0_state_cmp_full <= '0' when (inStream_V_keep_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_keep_V_0_vld_in <= inStream_TVALID;
    inStream_V_keep_V_0_vld_out <= inStream_V_keep_V_0_state(0);
    inStream_V_last_V_0_ack_in <= inStream_V_last_V_0_state(1);

    inStream_V_last_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, exitcond1_reg_2073, ap_block_pp0_stage2_11001)
    begin
        if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            inStream_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_last_V_0_data_out_assign_proc : process(inStream_V_last_V_0_payload_A, inStream_V_last_V_0_payload_B, inStream_V_last_V_0_sel)
    begin
        if ((inStream_V_last_V_0_sel = ap_const_logic_1)) then 
            inStream_V_last_V_0_data_out <= inStream_V_last_V_0_payload_B;
        else 
            inStream_V_last_V_0_data_out <= inStream_V_last_V_0_payload_A;
        end if; 
    end process;

    inStream_V_last_V_0_load_A <= (inStream_V_last_V_0_state_cmp_full and not(inStream_V_last_V_0_sel_wr));
    inStream_V_last_V_0_load_B <= (inStream_V_last_V_0_state_cmp_full and inStream_V_last_V_0_sel_wr);
    inStream_V_last_V_0_sel <= inStream_V_last_V_0_sel_rd;
    inStream_V_last_V_0_state_cmp_full <= '0' when (inStream_V_last_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_last_V_0_vld_in <= inStream_TVALID;
    inStream_V_last_V_0_vld_out <= inStream_V_last_V_0_state(0);
    inStream_V_strb_V_0_ack_in <= inStream_V_strb_V_0_state(1);

    inStream_V_strb_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, exitcond1_reg_2073, ap_block_pp0_stage2_11001)
    begin
        if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            inStream_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_strb_V_0_data_out_assign_proc : process(inStream_V_strb_V_0_payload_A, inStream_V_strb_V_0_payload_B, inStream_V_strb_V_0_sel)
    begin
        if ((inStream_V_strb_V_0_sel = ap_const_logic_1)) then 
            inStream_V_strb_V_0_data_out <= inStream_V_strb_V_0_payload_B;
        else 
            inStream_V_strb_V_0_data_out <= inStream_V_strb_V_0_payload_A;
        end if; 
    end process;

    inStream_V_strb_V_0_load_A <= (inStream_V_strb_V_0_state_cmp_full and not(inStream_V_strb_V_0_sel_wr));
    inStream_V_strb_V_0_load_B <= (inStream_V_strb_V_0_state_cmp_full and inStream_V_strb_V_0_sel_wr);
    inStream_V_strb_V_0_sel <= inStream_V_strb_V_0_sel_rd;
    inStream_V_strb_V_0_state_cmp_full <= '0' when (inStream_V_strb_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_strb_V_0_vld_in <= inStream_TVALID;
    inStream_V_strb_V_0_vld_out <= inStream_V_strb_V_0_state(0);
    inStream_V_user_V_0_ack_in <= inStream_V_user_V_0_state(1);

    inStream_V_user_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, exitcond1_reg_2073, ap_block_pp0_stage2_11001)
    begin
        if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            inStream_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_user_V_0_data_out_assign_proc : process(inStream_V_user_V_0_payload_A, inStream_V_user_V_0_payload_B, inStream_V_user_V_0_sel)
    begin
        if ((inStream_V_user_V_0_sel = ap_const_logic_1)) then 
            inStream_V_user_V_0_data_out <= inStream_V_user_V_0_payload_B;
        else 
            inStream_V_user_V_0_data_out <= inStream_V_user_V_0_payload_A;
        end if; 
    end process;

    inStream_V_user_V_0_load_A <= (inStream_V_user_V_0_state_cmp_full and not(inStream_V_user_V_0_sel_wr));
    inStream_V_user_V_0_load_B <= (inStream_V_user_V_0_state_cmp_full and inStream_V_user_V_0_sel_wr);
    inStream_V_user_V_0_sel <= inStream_V_user_V_0_sel_rd;
    inStream_V_user_V_0_state_cmp_full <= '0' when (inStream_V_user_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_user_V_0_vld_in <= inStream_TVALID;
    inStream_V_user_V_0_vld_out <= inStream_V_user_V_0_state(0);

    kernel_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage19, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage24, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage18, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11, ap_block_pp0_stage12, ap_block_pp0_stage13, ap_block_pp0_stage14, ap_block_pp0_stage15, ap_block_pp0_stage16, ap_block_pp0_stage17, ap_block_pp0_stage18, ap_block_pp0_stage19, ap_block_pp0_stage20, ap_block_pp0_stage21, ap_block_pp0_stage22, ap_block_pp0_stage23, ap_block_pp0_stage24)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24))) then 
                kernel_address0 <= ap_const_lv64_17(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23))) then 
                kernel_address0 <= ap_const_lv64_16(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22))) then 
                kernel_address0 <= ap_const_lv64_15(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21))) then 
                kernel_address0 <= ap_const_lv64_18(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20))) then 
                kernel_address0 <= ap_const_lv64_14(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19))) then 
                kernel_address0 <= ap_const_lv64_13(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18))) then 
                kernel_address0 <= ap_const_lv64_12(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17))) then 
                kernel_address0 <= ap_const_lv64_11(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16))) then 
                kernel_address0 <= ap_const_lv64_10(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15))) then 
                kernel_address0 <= ap_const_lv64_F(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14))) then 
                kernel_address0 <= ap_const_lv64_E(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13))) then 
                kernel_address0 <= ap_const_lv64_D(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12))) then 
                kernel_address0 <= ap_const_lv64_C(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11))) then 
                kernel_address0 <= ap_const_lv64_B(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
                kernel_address0 <= ap_const_lv64_A(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9))) then 
                kernel_address0 <= ap_const_lv64_9(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
                kernel_address0 <= ap_const_lv64_8(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7))) then 
                kernel_address0 <= ap_const_lv64_7(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
                kernel_address0 <= ap_const_lv64_6(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                kernel_address0 <= ap_const_lv64_5(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                kernel_address0 <= ap_const_lv64_4(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                kernel_address0 <= ap_const_lv64_3(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address0 <= ap_const_lv64_2(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                kernel_address0 <= ap_const_lv64_1(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                kernel_address0 <= ap_const_lv64_0(5 - 1 downto 0);
            else 
                kernel_address0 <= "XXXXX";
            end if;
        else 
            kernel_address0 <= "XXXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_11001, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17_11001, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19_11001, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage21_11001, ap_CS_fsm_pp0_stage24, ap_block_pp0_stage24_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16_11001, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage18_11001, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage20_11001, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage23_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage22_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, tmp_s_reg_2082, tmp_5_fu_883_p1, tmp_27_0_3_fu_995_p1, ap_block_pp0_stage1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                lineBuff_val_0_address0 <= tmp_27_0_3_fu_995_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                lineBuff_val_0_address0 <= tmp_5_fu_883_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                lineBuff_val_0_address0 <= tmp_s_reg_2082(8 - 1 downto 0);
            else 
                lineBuff_val_0_address0 <= "XXXXXXXX";
            end if;
        else 
            lineBuff_val_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    lineBuff_val_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage3, tmp_27_0_1_fu_897_p1, tmp_27_0_2_fu_981_p1, tmp_27_0_4_reg_2256, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                lineBuff_val_0_address1 <= tmp_27_0_4_reg_2256(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                lineBuff_val_0_address1 <= tmp_27_0_2_fu_981_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                lineBuff_val_0_address1 <= tmp_27_0_1_fu_897_p1(8 - 1 downto 0);
            else 
                lineBuff_val_0_address1 <= "XXXXXXXX";
            end if;
        else 
            lineBuff_val_0_address1 <= "XXXXXXXX";
        end if; 
    end process;


    lineBuff_val_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            lineBuff_val_0_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            lineBuff_val_0_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_0_we0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond1_reg_2073, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            lineBuff_val_0_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, tmp_s_fu_786_p1, lineBuff_val_1_addr_reg_2087, tmp_5_fu_883_p1, tmp_27_0_3_fu_995_p1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                lineBuff_val_1_address0 <= tmp_27_0_3_fu_995_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                lineBuff_val_1_address0 <= tmp_5_fu_883_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                lineBuff_val_1_address0 <= lineBuff_val_1_addr_reg_2087;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                lineBuff_val_1_address0 <= tmp_s_fu_786_p1(8 - 1 downto 0);
            else 
                lineBuff_val_1_address0 <= "XXXXXXXX";
            end if;
        else 
            lineBuff_val_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    lineBuff_val_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage3, tmp_27_0_1_fu_897_p1, tmp_27_0_2_fu_981_p1, tmp_27_0_4_reg_2256, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                lineBuff_val_1_address1 <= tmp_27_0_4_reg_2256(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                lineBuff_val_1_address1 <= tmp_27_0_2_fu_981_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                lineBuff_val_1_address1 <= tmp_27_0_1_fu_897_p1(8 - 1 downto 0);
            else 
                lineBuff_val_1_address1 <= "XXXXXXXX";
            end if;
        else 
            lineBuff_val_1_address1 <= "XXXXXXXX";
        end if; 
    end process;


    lineBuff_val_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            lineBuff_val_1_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            lineBuff_val_1_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_we0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond1_reg_2073, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            lineBuff_val_1_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, tmp_s_fu_786_p1, lineBuff_val_2_addr_reg_2092, tmp_5_fu_883_p1, tmp_27_0_3_fu_995_p1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                lineBuff_val_2_address0 <= tmp_27_0_3_fu_995_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                lineBuff_val_2_address0 <= tmp_5_fu_883_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                lineBuff_val_2_address0 <= lineBuff_val_2_addr_reg_2092;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                lineBuff_val_2_address0 <= tmp_s_fu_786_p1(8 - 1 downto 0);
            else 
                lineBuff_val_2_address0 <= "XXXXXXXX";
            end if;
        else 
            lineBuff_val_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    lineBuff_val_2_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage3, tmp_27_0_1_fu_897_p1, tmp_27_0_2_fu_981_p1, tmp_27_0_4_reg_2256, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                lineBuff_val_2_address1 <= tmp_27_0_4_reg_2256(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                lineBuff_val_2_address1 <= tmp_27_0_2_fu_981_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                lineBuff_val_2_address1 <= tmp_27_0_1_fu_897_p1(8 - 1 downto 0);
            else 
                lineBuff_val_2_address1 <= "XXXXXXXX";
            end if;
        else 
            lineBuff_val_2_address1 <= "XXXXXXXX";
        end if; 
    end process;


    lineBuff_val_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            lineBuff_val_2_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            lineBuff_val_2_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_we0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond1_reg_2073, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            lineBuff_val_2_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, tmp_s_fu_786_p1, lineBuff_val_3_addr_reg_2097, tmp_5_fu_883_p1, tmp_27_0_3_fu_995_p1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                lineBuff_val_3_address0 <= tmp_27_0_3_fu_995_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                lineBuff_val_3_address0 <= tmp_5_fu_883_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                lineBuff_val_3_address0 <= lineBuff_val_3_addr_reg_2097;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                lineBuff_val_3_address0 <= tmp_s_fu_786_p1(8 - 1 downto 0);
            else 
                lineBuff_val_3_address0 <= "XXXXXXXX";
            end if;
        else 
            lineBuff_val_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    lineBuff_val_3_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage3, tmp_27_0_1_fu_897_p1, tmp_27_0_2_fu_981_p1, tmp_27_0_4_reg_2256, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                lineBuff_val_3_address1 <= tmp_27_0_4_reg_2256(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                lineBuff_val_3_address1 <= tmp_27_0_2_fu_981_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                lineBuff_val_3_address1 <= tmp_27_0_1_fu_897_p1(8 - 1 downto 0);
            else 
                lineBuff_val_3_address1 <= "XXXXXXXX";
            end if;
        else 
            lineBuff_val_3_address1 <= "XXXXXXXX";
        end if; 
    end process;


    lineBuff_val_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            lineBuff_val_3_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            lineBuff_val_3_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_3_we0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond1_reg_2073, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond1_reg_2073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            lineBuff_val_3_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_4_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, tmp_s_fu_786_p1, lineBuff_val_4_addr_reg_2102, tmp_5_reg_2156, tmp_27_0_3_reg_2246, ap_block_pp0_stage0, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                lineBuff_val_4_address0 <= tmp_27_0_3_reg_2246(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                lineBuff_val_4_address0 <= tmp_5_reg_2156(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                lineBuff_val_4_address0 <= lineBuff_val_4_addr_reg_2102;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                lineBuff_val_4_address0 <= tmp_s_fu_786_p1(8 - 1 downto 0);
            else 
                lineBuff_val_4_address0 <= "XXXXXXXX";
            end if;
        else 
            lineBuff_val_4_address0 <= "XXXXXXXX";
        end if; 
    end process;


    lineBuff_val_4_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage3, tmp_27_0_1_reg_2166, tmp_27_0_2_reg_2236, tmp_27_0_4_fu_1009_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                lineBuff_val_4_address1 <= tmp_27_0_2_reg_2236(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                lineBuff_val_4_address1 <= tmp_27_0_1_reg_2166(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                lineBuff_val_4_address1 <= tmp_27_0_4_fu_1009_p1(8 - 1 downto 0);
            else 
                lineBuff_val_4_address1 <= "XXXXXXXX";
            end if;
        else 
            lineBuff_val_4_address1 <= "XXXXXXXX";
        end if; 
    end process;


    lineBuff_val_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            lineBuff_val_4_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_4_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            lineBuff_val_4_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, exitcond1_reg_2073, ap_block_pp0_stage2_11001)
    begin
        if (((exitcond1_reg_2073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            lineBuff_val_4_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_826_p2 <= (icmp_fu_804_p2 and icmp4_fu_820_p2);
    outStream_TDATA <= outStream_V_data_V_1_data_out;

    outStream_TDATA_blk_n_assign_proc : process(outStream_V_data_V_1_state, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4, exitcond1_reg_2073_pp0_iter1_reg, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5) and (exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            outStream_TDATA_blk_n <= outStream_V_data_V_1_state(1);
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TDEST <= outStream_V_dest_V_1_data_out;
    outStream_TID <= outStream_V_id_V_1_data_out;
    outStream_TKEEP <= outStream_V_keep_V_1_data_out;
    outStream_TLAST <= outStream_V_last_V_1_data_out;
    outStream_TSTRB <= outStream_V_strb_V_1_data_out;
    outStream_TUSER <= outStream_V_user_V_1_data_out;
    outStream_TVALID <= outStream_V_dest_V_1_state(0);
    outStream_V_data_V_1_ack_in <= outStream_V_data_V_1_state(1);
    outStream_V_data_V_1_ack_out <= outStream_TREADY;

    outStream_V_data_V_1_data_out_assign_proc : process(outStream_V_data_V_1_payload_A, outStream_V_data_V_1_payload_B, outStream_V_data_V_1_sel)
    begin
        if ((outStream_V_data_V_1_sel = ap_const_logic_1)) then 
            outStream_V_data_V_1_data_out <= outStream_V_data_V_1_payload_B;
        else 
            outStream_V_data_V_1_data_out <= outStream_V_data_V_1_payload_A;
        end if; 
    end process;

    outStream_V_data_V_1_load_A <= (outStream_V_data_V_1_state_cmp_full and not(outStream_V_data_V_1_sel_wr));
    outStream_V_data_V_1_load_B <= (outStream_V_data_V_1_state_cmp_full and outStream_V_data_V_1_sel_wr);
    outStream_V_data_V_1_sel <= outStream_V_data_V_1_sel_rd;
    outStream_V_data_V_1_state_cmp_full <= '0' when (outStream_V_data_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, exitcond1_reg_2073_pp0_iter1_reg, ap_block_pp0_stage4_11001)
    begin
        if (((exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            outStream_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_data_V_1_vld_out <= outStream_V_data_V_1_state(0);
    outStream_V_dest_V_1_ack_in <= outStream_V_dest_V_1_state(1);
    outStream_V_dest_V_1_ack_out <= outStream_TREADY;

    outStream_V_dest_V_1_data_out_assign_proc : process(outStream_V_dest_V_1_payload_A, outStream_V_dest_V_1_payload_B, outStream_V_dest_V_1_sel)
    begin
        if ((outStream_V_dest_V_1_sel = ap_const_logic_1)) then 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_B;
        else 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_A;
        end if; 
    end process;

    outStream_V_dest_V_1_load_A <= (outStream_V_dest_V_1_state_cmp_full and not(outStream_V_dest_V_1_sel_wr));
    outStream_V_dest_V_1_load_B <= (outStream_V_dest_V_1_state_cmp_full and outStream_V_dest_V_1_sel_wr);
    outStream_V_dest_V_1_sel <= outStream_V_dest_V_1_sel_rd;
    outStream_V_dest_V_1_state_cmp_full <= '0' when (outStream_V_dest_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, exitcond1_reg_2073_pp0_iter1_reg, ap_block_pp0_stage4_11001)
    begin
        if (((exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_dest_V_1_vld_out <= outStream_V_dest_V_1_state(0);
    outStream_V_id_V_1_ack_in <= outStream_V_id_V_1_state(1);
    outStream_V_id_V_1_ack_out <= outStream_TREADY;
    outStream_V_id_V_1_data_out <= ap_const_lv5_0;
    outStream_V_id_V_1_sel <= outStream_V_id_V_1_sel_rd;

    outStream_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, exitcond1_reg_2073_pp0_iter1_reg, ap_block_pp0_stage4_11001)
    begin
        if (((exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            outStream_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_id_V_1_vld_out <= outStream_V_id_V_1_state(0);
    outStream_V_keep_V_1_ack_in <= outStream_V_keep_V_1_state(1);
    outStream_V_keep_V_1_ack_out <= outStream_TREADY;

    outStream_V_keep_V_1_data_out_assign_proc : process(outStream_V_keep_V_1_payload_A, outStream_V_keep_V_1_payload_B, outStream_V_keep_V_1_sel)
    begin
        if ((outStream_V_keep_V_1_sel = ap_const_logic_1)) then 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_B;
        else 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_A;
        end if; 
    end process;

    outStream_V_keep_V_1_load_A <= (outStream_V_keep_V_1_state_cmp_full and not(outStream_V_keep_V_1_sel_wr));
    outStream_V_keep_V_1_load_B <= (outStream_V_keep_V_1_state_cmp_full and outStream_V_keep_V_1_sel_wr);
    outStream_V_keep_V_1_sel <= outStream_V_keep_V_1_sel_rd;
    outStream_V_keep_V_1_state_cmp_full <= '0' when (outStream_V_keep_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, exitcond1_reg_2073_pp0_iter1_reg, ap_block_pp0_stage4_11001)
    begin
        if (((exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_keep_V_1_vld_out <= outStream_V_keep_V_1_state(0);
    outStream_V_last_V_1_ack_in <= outStream_V_last_V_1_state(1);
    outStream_V_last_V_1_ack_out <= outStream_TREADY;

    outStream_V_last_V_1_data_out_assign_proc : process(outStream_V_last_V_1_payload_A, outStream_V_last_V_1_payload_B, outStream_V_last_V_1_sel)
    begin
        if ((outStream_V_last_V_1_sel = ap_const_logic_1)) then 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_B;
        else 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_A;
        end if; 
    end process;

    outStream_V_last_V_1_load_A <= (outStream_V_last_V_1_state_cmp_full and not(outStream_V_last_V_1_sel_wr));
    outStream_V_last_V_1_load_B <= (outStream_V_last_V_1_state_cmp_full and outStream_V_last_V_1_sel_wr);
    outStream_V_last_V_1_sel <= outStream_V_last_V_1_sel_rd;
    outStream_V_last_V_1_state_cmp_full <= '0' when (outStream_V_last_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, exitcond1_reg_2073_pp0_iter1_reg, ap_block_pp0_stage4_11001)
    begin
        if (((exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            outStream_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_last_V_1_vld_out <= outStream_V_last_V_1_state(0);
    outStream_V_strb_V_1_ack_in <= outStream_V_strb_V_1_state(1);
    outStream_V_strb_V_1_ack_out <= outStream_TREADY;

    outStream_V_strb_V_1_data_out_assign_proc : process(outStream_V_strb_V_1_payload_A, outStream_V_strb_V_1_payload_B, outStream_V_strb_V_1_sel)
    begin
        if ((outStream_V_strb_V_1_sel = ap_const_logic_1)) then 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_B;
        else 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_A;
        end if; 
    end process;

    outStream_V_strb_V_1_load_A <= (outStream_V_strb_V_1_state_cmp_full and not(outStream_V_strb_V_1_sel_wr));
    outStream_V_strb_V_1_load_B <= (outStream_V_strb_V_1_state_cmp_full and outStream_V_strb_V_1_sel_wr);
    outStream_V_strb_V_1_sel <= outStream_V_strb_V_1_sel_rd;
    outStream_V_strb_V_1_state_cmp_full <= '0' when (outStream_V_strb_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, exitcond1_reg_2073_pp0_iter1_reg, ap_block_pp0_stage4_11001)
    begin
        if (((exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_strb_V_1_vld_out <= outStream_V_strb_V_1_state(0);
    outStream_V_user_V_1_ack_in <= outStream_V_user_V_1_state(1);
    outStream_V_user_V_1_ack_out <= outStream_TREADY;

    outStream_V_user_V_1_data_out_assign_proc : process(outStream_V_user_V_1_payload_A, outStream_V_user_V_1_payload_B, outStream_V_user_V_1_sel)
    begin
        if ((outStream_V_user_V_1_sel = ap_const_logic_1)) then 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_B;
        else 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_A;
        end if; 
    end process;

    outStream_V_user_V_1_load_A <= (outStream_V_user_V_1_state_cmp_full and not(outStream_V_user_V_1_sel_wr));
    outStream_V_user_V_1_load_B <= (outStream_V_user_V_1_state_cmp_full and outStream_V_user_V_1_sel_wr);
    outStream_V_user_V_1_sel <= outStream_V_user_V_1_sel_rd;
    outStream_V_user_V_1_state_cmp_full <= '0' when (outStream_V_user_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, exitcond1_reg_2073_pp0_iter1_reg, ap_block_pp0_stage4_11001)
    begin
        if (((exitcond1_reg_2073_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            outStream_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_user_V_1_vld_out <= outStream_V_user_V_1_state(0);
    p_neg_fu_1866_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(tmp_20_tr_fu_1863_p1));
    p_s_fu_1918_p3 <= 
        ap_const_lv8_0 when (tmp_27_fu_1910_p3(0) = '1') else 
        tmp_26_fu_1906_p1;
    pixProcessed_1_fu_940_p3 <= 
        pixProcessed_3_fu_891_p2 when (sel_tmp9_fu_936_p2(0) = '1') else 
        sel_tmp7_fu_928_p3;
    pixProcessed_2_fu_954_p3 <= 
        pixProcessed_1_fu_940_p3 when (tmp_6_reg_2115(0) = '1') else 
        ap_const_lv32_0;
    pixProcessed_3_fu_891_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_pixProcessed_phi_fu_725_p4));
    sel_tmp15_cast_fu_1849_p3 <= 
        ap_const_lv8_FF when (sel_tmp3_reg_2206_pp0_iter1_reg(0) = '1') else 
        ap_const_lv8_0;
    sel_tmp1_fu_905_p3 <= 
        pixProcessed_3_fu_891_p2 when (or_cond_reg_2107(0) = '1') else 
        ap_phi_mux_pixProcessed_phi_fu_725_p4;
    sel_tmp2_fu_756_p2 <= "1" when (operation = ap_const_lv32_2) else "0";
    sel_tmp3_fu_912_p2 <= (sel_tmp2_reg_2058 and or_cond_reg_2107);
    sel_tmp4_fu_916_p3 <= 
        pixProcessed_3_fu_891_p2 when (sel_tmp3_fu_912_p2(0) = '1') else 
        sel_tmp1_fu_905_p3;
    sel_tmp5_fu_762_p2 <= "1" when (operation = ap_const_lv32_1) else "0";
    sel_tmp6_fu_924_p2 <= (sel_tmp5_reg_2063 and or_cond_reg_2107);
    sel_tmp7_fu_928_p3 <= 
        pixProcessed_3_fu_891_p2 when (sel_tmp6_fu_924_p2(0) = '1') else 
        sel_tmp4_fu_916_p3;
    sel_tmp8_fu_768_p2 <= "1" when (operation = ap_const_lv32_0) else "0";
    sel_tmp9_fu_936_p2 <= (sel_tmp8_reg_2068 and or_cond_reg_2107);
    sel_tmp_fu_1856_p3 <= 
        valInWindow_0_minVal_22_fu_1843_p3 when (sel_tmp6_reg_2211_pp0_iter1_reg(0) = '1') else 
        sel_tmp15_cast_fu_1849_p3;
    tmp10_fu_1571_p2 <= std_logic_vector(unsigned(tmp9_reg_2626) + unsigned(tmp7_fu_1567_p2));
    tmp11_fu_1811_p2 <= std_logic_vector(unsigned(tmp10_reg_2642) + unsigned(tmp5_fu_1806_p2));
    tmp12_fu_1062_p2 <= std_logic_vector(unsigned(window_val_0_2_fu_1056_p2) + unsigned(window_val_0_1_reg_2340));
    tmp13_fu_1067_p2 <= std_logic_vector(unsigned(tmp12_fu_1062_p2) + unsigned(window_val_0_0_reg_2231));
    tmp14_fu_1160_p2 <= std_logic_vector(unsigned(window_val_1_0_fu_1154_p2) + unsigned(window_val_0_4_reg_2483));
    tmp15_fu_1165_p2 <= std_logic_vector(unsigned(tmp14_fu_1160_p2) + unsigned(window_val_0_3_reg_2467));
    tmp16_fu_1685_p2 <= std_logic_vector(unsigned(tmp15_reg_2494) + unsigned(tmp13_reg_2456));
    tmp17_fu_1257_p2 <= std_logic_vector(unsigned(window_val_1_3_fu_1251_p2) + unsigned(window_val_1_2_reg_2516));
    tmp18_fu_1627_p2 <= std_logic_vector(unsigned(tmp17_reg_2527) + unsigned(window_val_1_1_reg_2505));
    tmp19_fu_1631_p2 <= std_logic_vector(unsigned(window_val_1_4_reg_2538) + unsigned(window_val_2_1_reg_2560));
    tmp1_fu_1781_p2 <= std_logic_vector(unsigned(window_val_4_3_fu_1775_p2) + unsigned(window_val_4_1_reg_2696));
    tmp20_fu_1605_p2 <= std_logic_vector(unsigned(window_val_2_0_reg_2549) + unsigned(window_val_4_4_fu_1599_p2));
    tmp21_fu_1635_p2 <= std_logic_vector(unsigned(tmp20_reg_2653) + unsigned(tmp19_fu_1631_p2));
    tmp22_fu_1640_p2 <= std_logic_vector(unsigned(tmp21_fu_1635_p2) + unsigned(tmp18_fu_1627_p2));
    tmp23_fu_1689_p2 <= std_logic_vector(unsigned(tmp22_reg_2669) + unsigned(tmp16_fu_1685_p2));
    tmp2_fu_1802_p2 <= std_logic_vector(unsigned(tmp1_reg_2718) + unsigned(window_val_4_2_reg_2707));
    tmp3_fu_1675_p2 <= std_logic_vector(unsigned(window_val_4_0_fu_1669_p2) + unsigned(window_val_3_4_reg_2664));
    tmp4_fu_1680_p2 <= std_logic_vector(unsigned(tmp3_fu_1675_p2) + unsigned(window_val_3_3_reg_2637));
    tmp5_fu_1806_p2 <= std_logic_vector(unsigned(tmp4_reg_2680) + unsigned(tmp2_fu_1802_p2));
    tmp6_fu_1436_p2 <= std_logic_vector(unsigned(window_val_2_4_fu_1430_p2) + unsigned(window_val_2_3_reg_2582));
    tmp7_fu_1567_p2 <= std_logic_vector(unsigned(tmp6_reg_2593) + unsigned(window_val_2_2_reg_2571));
    tmp8_fu_1528_p2 <= std_logic_vector(unsigned(window_val_3_2_fu_1522_p2) + unsigned(window_val_3_1_reg_2615));
    tmp9_fu_1533_p2 <= std_logic_vector(unsigned(tmp8_fu_1528_p2) + unsigned(window_val_3_0_reg_2604));
    tmp_10_cast_fu_1895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_1886_p1),15));
    tmp_1_fu_794_p4 <= ap_phi_mux_idxRow_phi_fu_703_p4(31 downto 2);
        tmp_20_tr_fu_1863_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(valOutput_reg_2729),17));

    tmp_26_fu_1906_p1 <= valOutput_1_fu_1899_p3(8 - 1 downto 0);
    tmp_27_0_1_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixProcessed_3_fu_891_p2),64));
    tmp_27_0_2_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_1_0_2_fu_975_p2),64));
    tmp_27_0_3_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_1_0_3_fu_989_p2),64));
    tmp_27_0_4_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_1_0_4_fu_1003_p2),64));
    tmp_27_fu_1910_p3 <= valOutput_1_fu_1899_p3(14 downto 14);
    tmp_28_fu_1014_p1 <= window_val_0_0_fu_969_p2(8 - 1 downto 0);
    tmp_29_fu_1032_p1 <= window_val_0_1_fu_1026_p2(8 - 1 downto 0);
    tmp_2_fu_810_p4 <= ap_phi_mux_col_assign_phi_fu_714_p4(31 downto 2);
    tmp_30_fu_1072_p1 <= window_val_0_2_fu_1056_p2(8 - 1 downto 0);
    tmp_31_fu_1101_p1 <= window_val_0_3_fu_1095_p2(8 - 1 downto 0);
    tmp_32_fu_1131_p1 <= window_val_0_4_fu_1125_p2(8 - 1 downto 0);
    tmp_33_fu_1170_p1 <= window_val_1_0_fu_1154_p2(8 - 1 downto 0);
    tmp_34_fu_1199_p1 <= window_val_1_1_fu_1193_p2(8 - 1 downto 0);
    tmp_35_fu_1228_p1 <= window_val_1_2_fu_1222_p2(8 - 1 downto 0);
    tmp_36_fu_1262_p1 <= window_val_1_3_fu_1251_p2(8 - 1 downto 0);
    tmp_37_fu_1291_p1 <= window_val_1_4_fu_1285_p2(8 - 1 downto 0);
    tmp_38_fu_1320_p1 <= window_val_2_0_fu_1314_p2(8 - 1 downto 0);
    tmp_39_fu_1349_p1 <= window_val_2_1_fu_1343_p2(8 - 1 downto 0);
    tmp_40_fu_1378_p1 <= window_val_2_2_fu_1372_p2(8 - 1 downto 0);
    tmp_41_fu_1407_p1 <= window_val_2_3_fu_1401_p2(8 - 1 downto 0);
    tmp_42_fu_1441_p1 <= window_val_2_4_fu_1430_p2(8 - 1 downto 0);
    tmp_43_fu_1470_p1 <= window_val_3_0_fu_1464_p2(8 - 1 downto 0);
    tmp_44_fu_1499_p1 <= window_val_3_1_fu_1493_p2(8 - 1 downto 0);
    tmp_45_fu_1538_p1 <= window_val_3_2_fu_1522_p2(8 - 1 downto 0);
    tmp_46_fu_1576_p1 <= window_val_3_3_fu_1561_p2(8 - 1 downto 0);
    tmp_47_fu_1646_p1 <= window_val_3_4_fu_1621_p2(8 - 1 downto 0);
    tmp_48_fu_1694_p1 <= window_val_4_0_fu_1669_p2(8 - 1 downto 0);
    tmp_49_fu_1723_p1 <= window_val_4_1_fu_1717_p2(8 - 1 downto 0);
    tmp_4_fu_1872_p4 <= p_neg_fu_1866_p2(16 downto 3);
    tmp_50_fu_1752_p1 <= window_val_4_2_fu_1746_p2(8 - 1 downto 0);
    tmp_51_fu_1786_p1 <= window_val_4_3_fu_1775_p2(8 - 1 downto 0);
    tmp_52_fu_1610_p1 <= window_val_4_4_fu_1599_p2(8 - 1 downto 0);
    tmp_5_0_1_i_fu_1036_p2 <= "1" when (unsigned(tmp_29_fu_1032_p1) < unsigned(tmp_28_reg_2334)) else "0";
    tmp_5_0_2_i_fu_1076_p2 <= "1" when (unsigned(tmp_30_fu_1072_p1) < unsigned(valInWindow_0_minVal_reg_2420)) else "0";
    tmp_5_0_3_i_fu_1105_p2 <= "1" when (unsigned(tmp_31_fu_1101_p1) < unsigned(valInWindow_0_minVal_1_reg_2461)) else "0";
    tmp_5_0_4_i_fu_1135_p2 <= "1" when (unsigned(tmp_32_fu_1131_p1) < unsigned(valInWindow_0_minVal_2_reg_2477)) else "0";
    tmp_5_1_1_i_fu_1203_p2 <= "1" when (unsigned(tmp_34_fu_1199_p1) < unsigned(valInWindow_0_minVal_4_reg_2499)) else "0";
    tmp_5_1_2_i_fu_1232_p2 <= "1" when (unsigned(tmp_35_fu_1228_p1) < unsigned(valInWindow_0_minVal_5_reg_2510)) else "0";
    tmp_5_1_3_i_fu_1266_p2 <= "1" when (unsigned(tmp_36_fu_1262_p1) < unsigned(valInWindow_0_minVal_6_reg_2521)) else "0";
    tmp_5_1_4_i_fu_1295_p2 <= "1" when (unsigned(tmp_37_fu_1291_p1) < unsigned(valInWindow_0_minVal_7_reg_2532)) else "0";
    tmp_5_1_i_fu_1174_p2 <= "1" when (unsigned(tmp_33_fu_1170_p1) < unsigned(valInWindow_0_minVal_3_reg_2488)) else "0";
    tmp_5_2_1_i_fu_1353_p2 <= "1" when (unsigned(tmp_39_fu_1349_p1) < unsigned(valInWindow_0_minVal_9_reg_2554)) else "0";
    tmp_5_2_2_i_fu_1382_p2 <= "1" when (unsigned(tmp_40_fu_1378_p1) < unsigned(valInWindow_0_minVal_23_reg_2565)) else "0";
    tmp_5_2_3_i_fu_1411_p2 <= "1" when (unsigned(tmp_41_fu_1407_p1) < unsigned(valInWindow_0_minVal_10_reg_2576)) else "0";
    tmp_5_2_4_i_fu_1445_p2 <= "1" when (unsigned(tmp_42_fu_1441_p1) < unsigned(valInWindow_0_minVal_11_reg_2587)) else "0";
    tmp_5_2_i_fu_1324_p2 <= "1" when (unsigned(tmp_38_fu_1320_p1) < unsigned(valInWindow_0_minVal_8_reg_2543)) else "0";
    tmp_5_3_1_i_fu_1503_p2 <= "1" when (unsigned(tmp_44_fu_1499_p1) < unsigned(valInWindow_0_minVal_13_reg_2609)) else "0";
    tmp_5_3_2_i_fu_1542_p2 <= "1" when (unsigned(tmp_45_fu_1538_p1) < unsigned(valInWindow_0_minVal_14_reg_2620)) else "0";
    tmp_5_3_3_i_fu_1580_p2 <= "1" when (unsigned(tmp_46_fu_1576_p1) < unsigned(valInWindow_0_minVal_15_reg_2631)) else "0";
    tmp_5_3_4_i_fu_1650_p2 <= "1" when (unsigned(tmp_47_fu_1646_p1) < unsigned(valInWindow_0_minVal_16_reg_2647)) else "0";
    tmp_5_3_i_fu_1474_p2 <= "1" when (unsigned(tmp_43_fu_1470_p1) < unsigned(valInWindow_0_minVal_12_reg_2598)) else "0";
    tmp_5_4_1_i_fu_1727_p2 <= "1" when (unsigned(tmp_49_fu_1723_p1) < unsigned(valInWindow_0_minVal_18_reg_2690)) else "0";
    tmp_5_4_2_i_fu_1756_p2 <= "1" when (unsigned(tmp_50_fu_1752_p1) < unsigned(valInWindow_0_minVal_19_reg_2701)) else "0";
    tmp_5_4_3_i_fu_1790_p2 <= "1" when (unsigned(tmp_51_fu_1786_p1) < unsigned(valInWindow_0_minVal_20_reg_2712)) else "0";
    tmp_5_4_4_i_fu_1839_p2 <= "1" when (unsigned(tmp_52_reg_2658) < unsigned(valInWindow_0_minVal_21_reg_2723)) else "0";
    tmp_5_4_i_fu_1698_p2 <= "1" when (unsigned(tmp_48_fu_1694_p1) < unsigned(valInWindow_0_minVal_17_reg_2674)) else "0";
    tmp_5_cast_fu_1882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_1872_p4),15));
    tmp_5_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_pixProcessed_phi_fu_725_p4),64));
    tmp_6_fu_832_p2 <= "1" when (signed(ap_phi_mux_col_assign_phi_fu_714_p4) < signed(ap_const_lv32_EF)) else "0";
        tmp_8_fu_1886_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_reg_2739),14));

    tmp_9_fu_1889_p2 <= std_logic_vector(unsigned(ap_const_lv15_0) - unsigned(tmp_5_cast_fu_1882_p1));
    tmp_s_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_col_assign_phi_fu_714_p4),64));
    valInWindow_0_minVal_10_fu_1387_p3 <= 
        tmp_40_fu_1378_p1 when (tmp_5_2_2_i_fu_1382_p2(0) = '1') else 
        valInWindow_0_minVal_23_reg_2565;
    valInWindow_0_minVal_11_fu_1416_p3 <= 
        tmp_41_fu_1407_p1 when (tmp_5_2_3_i_fu_1411_p2(0) = '1') else 
        valInWindow_0_minVal_10_reg_2576;
    valInWindow_0_minVal_12_fu_1450_p3 <= 
        tmp_42_fu_1441_p1 when (tmp_5_2_4_i_fu_1445_p2(0) = '1') else 
        valInWindow_0_minVal_11_reg_2587;
    valInWindow_0_minVal_13_fu_1479_p3 <= 
        tmp_43_fu_1470_p1 when (tmp_5_3_i_fu_1474_p2(0) = '1') else 
        valInWindow_0_minVal_12_reg_2598;
    valInWindow_0_minVal_14_fu_1508_p3 <= 
        tmp_44_fu_1499_p1 when (tmp_5_3_1_i_fu_1503_p2(0) = '1') else 
        valInWindow_0_minVal_13_reg_2609;
    valInWindow_0_minVal_15_fu_1547_p3 <= 
        tmp_45_fu_1538_p1 when (tmp_5_3_2_i_fu_1542_p2(0) = '1') else 
        valInWindow_0_minVal_14_reg_2620;
    valInWindow_0_minVal_16_fu_1585_p3 <= 
        tmp_46_fu_1576_p1 when (tmp_5_3_3_i_fu_1580_p2(0) = '1') else 
        valInWindow_0_minVal_15_reg_2631;
    valInWindow_0_minVal_17_fu_1655_p3 <= 
        tmp_47_fu_1646_p1 when (tmp_5_3_4_i_fu_1650_p2(0) = '1') else 
        valInWindow_0_minVal_16_reg_2647;
    valInWindow_0_minVal_18_fu_1703_p3 <= 
        tmp_48_fu_1694_p1 when (tmp_5_4_i_fu_1698_p2(0) = '1') else 
        valInWindow_0_minVal_17_reg_2674;
    valInWindow_0_minVal_19_fu_1732_p3 <= 
        tmp_49_fu_1723_p1 when (tmp_5_4_1_i_fu_1727_p2(0) = '1') else 
        valInWindow_0_minVal_18_reg_2690;
    valInWindow_0_minVal_1_fu_1081_p3 <= 
        tmp_30_fu_1072_p1 when (tmp_5_0_2_i_fu_1076_p2(0) = '1') else 
        valInWindow_0_minVal_reg_2420;
    valInWindow_0_minVal_20_fu_1761_p3 <= 
        tmp_50_fu_1752_p1 when (tmp_5_4_2_i_fu_1756_p2(0) = '1') else 
        valInWindow_0_minVal_19_reg_2701;
    valInWindow_0_minVal_21_fu_1795_p3 <= 
        tmp_51_fu_1786_p1 when (tmp_5_4_3_i_fu_1790_p2(0) = '1') else 
        valInWindow_0_minVal_20_reg_2712;
    valInWindow_0_minVal_22_fu_1843_p3 <= 
        tmp_52_reg_2658 when (tmp_5_4_4_i_fu_1839_p2(0) = '1') else 
        valInWindow_0_minVal_21_reg_2723;
    valInWindow_0_minVal_23_fu_1358_p3 <= 
        tmp_39_fu_1349_p1 when (tmp_5_2_1_i_fu_1353_p2(0) = '1') else 
        valInWindow_0_minVal_9_reg_2554;
    valInWindow_0_minVal_2_fu_1110_p3 <= 
        tmp_31_fu_1101_p1 when (tmp_5_0_3_i_fu_1105_p2(0) = '1') else 
        valInWindow_0_minVal_1_reg_2461;
    valInWindow_0_minVal_3_fu_1140_p3 <= 
        tmp_32_fu_1131_p1 when (tmp_5_0_4_i_fu_1135_p2(0) = '1') else 
        valInWindow_0_minVal_2_reg_2477;
    valInWindow_0_minVal_4_fu_1179_p3 <= 
        tmp_33_fu_1170_p1 when (tmp_5_1_i_fu_1174_p2(0) = '1') else 
        valInWindow_0_minVal_3_reg_2488;
    valInWindow_0_minVal_5_fu_1208_p3 <= 
        tmp_34_fu_1199_p1 when (tmp_5_1_1_i_fu_1203_p2(0) = '1') else 
        valInWindow_0_minVal_4_reg_2499;
    valInWindow_0_minVal_6_fu_1237_p3 <= 
        tmp_35_fu_1228_p1 when (tmp_5_1_2_i_fu_1232_p2(0) = '1') else 
        valInWindow_0_minVal_5_reg_2510;
    valInWindow_0_minVal_7_fu_1271_p3 <= 
        tmp_36_fu_1262_p1 when (tmp_5_1_3_i_fu_1266_p2(0) = '1') else 
        valInWindow_0_minVal_6_reg_2521;
    valInWindow_0_minVal_8_fu_1300_p3 <= 
        tmp_37_fu_1291_p1 when (tmp_5_1_4_i_fu_1295_p2(0) = '1') else 
        valInWindow_0_minVal_7_reg_2532;
    valInWindow_0_minVal_9_fu_1329_p3 <= 
        tmp_38_fu_1320_p1 when (tmp_5_2_i_fu_1324_p2(0) = '1') else 
        valInWindow_0_minVal_8_reg_2543;
    valInWindow_0_minVal_fu_1041_p3 <= 
        tmp_29_fu_1032_p1 when (tmp_5_0_1_i_fu_1036_p2(0) = '1') else 
        tmp_28_reg_2334;
    valOutput_1_fu_1899_p3 <= 
        tmp_9_fu_1889_p2 when (tmp_25_reg_2734(0) = '1') else 
        tmp_10_cast_fu_1895_p1;
    valOutput_fu_1816_p2 <= std_logic_vector(unsigned(tmp23_reg_2685) + unsigned(tmp11_fu_1811_p2));
    window_val_0_0_fu_969_p0 <= window_val_0_0_fu_969_p00(8 - 1 downto 0);
    window_val_0_0_fu_969_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_0_q0),16));
    window_val_0_0_fu_969_p1 <= reg_744;
    window_val_0_0_fu_969_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_0_0_fu_969_p0) * signed(window_val_0_0_fu_969_p1))), 16));
    window_val_0_1_fu_1026_p0 <= window_val_0_1_fu_1026_p00(8 - 1 downto 0);
    window_val_0_1_fu_1026_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_752),16));
    window_val_0_1_fu_1026_p1 <= reg_748;
    window_val_0_1_fu_1026_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_0_1_fu_1026_p0) * signed(window_val_0_1_fu_1026_p1))), 16));
    window_val_0_2_fu_1056_p0 <= window_val_0_2_fu_1056_p00(8 - 1 downto 0);
    window_val_0_2_fu_1056_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_752),16));
    window_val_0_2_fu_1056_p1 <= reg_744;
    window_val_0_2_fu_1056_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_0_2_fu_1056_p0) * signed(window_val_0_2_fu_1056_p1))), 16));
    window_val_0_3_fu_1095_p0 <= window_val_0_3_fu_1095_p00(8 - 1 downto 0);
    window_val_0_3_fu_1095_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_0_load_3_reg_2345),16));
    window_val_0_3_fu_1095_p1 <= reg_748;
    window_val_0_3_fu_1095_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_0_3_fu_1095_p0) * signed(window_val_0_3_fu_1095_p1))), 16));
    window_val_0_4_fu_1125_p0 <= window_val_0_4_fu_1125_p00(8 - 1 downto 0);
    window_val_0_4_fu_1125_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_752),16));
    window_val_0_4_fu_1125_p1 <= reg_744;
    window_val_0_4_fu_1125_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_0_4_fu_1125_p0) * signed(window_val_0_4_fu_1125_p1))), 16));
    window_val_1_0_fu_1154_p0 <= window_val_1_0_fu_1154_p00(8 - 1 downto 0);
    window_val_1_0_fu_1154_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_1_load_1_reg_2264),16));
    window_val_1_0_fu_1154_p1 <= reg_748;
    window_val_1_0_fu_1154_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_1_0_fu_1154_p0) * signed(window_val_1_0_fu_1154_p1))), 16));
    window_val_1_1_fu_1193_p0 <= window_val_1_1_fu_1193_p00(8 - 1 downto 0);
    window_val_1_1_fu_1193_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_1_load_2_reg_2269),16));
    window_val_1_1_fu_1193_p1 <= reg_744;
    window_val_1_1_fu_1193_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_1_1_fu_1193_p0) * signed(window_val_1_1_fu_1193_p1))), 16));
    window_val_1_2_fu_1222_p0 <= window_val_1_2_fu_1222_p00(8 - 1 downto 0);
    window_val_1_2_fu_1222_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_1_load_3_reg_2355),16));
    window_val_1_2_fu_1222_p1 <= reg_748;
    window_val_1_2_fu_1222_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_1_2_fu_1222_p0) * signed(window_val_1_2_fu_1222_p1))), 16));
    window_val_1_3_fu_1251_p0 <= window_val_1_3_fu_1251_p00(8 - 1 downto 0);
    window_val_1_3_fu_1251_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_1_load_4_reg_2360),16));
    window_val_1_3_fu_1251_p1 <= reg_744;
    window_val_1_3_fu_1251_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_1_3_fu_1251_p0) * signed(window_val_1_3_fu_1251_p1))), 16));
    window_val_1_4_fu_1285_p0 <= window_val_1_4_fu_1285_p00(8 - 1 downto 0);
    window_val_1_4_fu_1285_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_1_load_5_reg_2426),16));
    window_val_1_4_fu_1285_p1 <= reg_748;
    window_val_1_4_fu_1285_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_1_4_fu_1285_p0) * signed(window_val_1_4_fu_1285_p1))), 16));
    window_val_2_0_fu_1314_p0 <= window_val_2_0_fu_1314_p00(8 - 1 downto 0);
    window_val_2_0_fu_1314_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_2_load_1_reg_2284),16));
    window_val_2_0_fu_1314_p1 <= reg_744;
    window_val_2_0_fu_1314_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_2_0_fu_1314_p0) * signed(window_val_2_0_fu_1314_p1))), 16));
    window_val_2_1_fu_1343_p0 <= window_val_2_1_fu_1343_p00(8 - 1 downto 0);
    window_val_2_1_fu_1343_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_2_load_2_reg_2289),16));
    window_val_2_1_fu_1343_p1 <= reg_748;
    window_val_2_1_fu_1343_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_2_1_fu_1343_p0) * signed(window_val_2_1_fu_1343_p1))), 16));
    window_val_2_2_fu_1372_p0 <= window_val_2_2_fu_1372_p00(8 - 1 downto 0);
    window_val_2_2_fu_1372_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_2_load_3_reg_2370),16));
    window_val_2_2_fu_1372_p1 <= reg_744;
    window_val_2_2_fu_1372_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_2_2_fu_1372_p0) * signed(window_val_2_2_fu_1372_p1))), 16));
    window_val_2_3_fu_1401_p0 <= window_val_2_3_fu_1401_p00(8 - 1 downto 0);
    window_val_2_3_fu_1401_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_2_load_4_reg_2375),16));
    window_val_2_3_fu_1401_p1 <= reg_748;
    window_val_2_3_fu_1401_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_2_3_fu_1401_p0) * signed(window_val_2_3_fu_1401_p1))), 16));
    window_val_2_4_fu_1430_p0 <= window_val_2_4_fu_1430_p00(8 - 1 downto 0);
    window_val_2_4_fu_1430_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_2_load_5_reg_2431),16));
    window_val_2_4_fu_1430_p1 <= reg_744;
    window_val_2_4_fu_1430_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_2_4_fu_1430_p0) * signed(window_val_2_4_fu_1430_p1))), 16));
    window_val_3_0_fu_1464_p0 <= window_val_3_0_fu_1464_p00(8 - 1 downto 0);
    window_val_3_0_fu_1464_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_3_load_1_reg_2304),16));
    window_val_3_0_fu_1464_p1 <= reg_748;
    window_val_3_0_fu_1464_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_3_0_fu_1464_p0) * signed(window_val_3_0_fu_1464_p1))), 16));
    window_val_3_1_fu_1493_p0 <= window_val_3_1_fu_1493_p00(8 - 1 downto 0);
    window_val_3_1_fu_1493_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_3_load_2_reg_2309),16));
    window_val_3_1_fu_1493_p1 <= reg_744;
    window_val_3_1_fu_1493_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_3_1_fu_1493_p0) * signed(window_val_3_1_fu_1493_p1))), 16));
    window_val_3_2_fu_1522_p0 <= window_val_3_2_fu_1522_p00(8 - 1 downto 0);
    window_val_3_2_fu_1522_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_3_load_3_reg_2385),16));
    window_val_3_2_fu_1522_p1 <= reg_748;
    window_val_3_2_fu_1522_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_3_2_fu_1522_p0) * signed(window_val_3_2_fu_1522_p1))), 16));
    window_val_3_3_fu_1561_p0 <= window_val_3_3_fu_1561_p00(8 - 1 downto 0);
    window_val_3_3_fu_1561_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_3_load_4_reg_2390),16));
    window_val_3_3_fu_1561_p1 <= reg_744;
    window_val_3_3_fu_1561_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_3_3_fu_1561_p0) * signed(window_val_3_3_fu_1561_p1))), 16));
    window_val_3_4_fu_1621_p0 <= window_val_3_4_fu_1621_p00(8 - 1 downto 0);
    window_val_3_4_fu_1621_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_3_load_5_reg_2436),16));
    window_val_3_4_fu_1621_p1 <= reg_748;
    window_val_3_4_fu_1621_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_3_4_fu_1621_p0) * signed(window_val_3_4_fu_1621_p1))), 16));
    window_val_4_0_fu_1669_p0 <= window_val_4_0_fu_1669_p00(8 - 1 downto 0);
    window_val_4_0_fu_1669_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_4_load_1_reg_2400),16));
    window_val_4_0_fu_1669_p1 <= reg_744;
    window_val_4_0_fu_1669_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_4_0_fu_1669_p0) * signed(window_val_4_0_fu_1669_p1))), 16));
    window_val_4_1_fu_1717_p0 <= window_val_4_1_fu_1717_p00(8 - 1 downto 0);
    window_val_4_1_fu_1717_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_4_load_2_reg_2441),16));
    window_val_4_1_fu_1717_p1 <= reg_748;
    window_val_4_1_fu_1717_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_4_1_fu_1717_p0) * signed(window_val_4_1_fu_1717_p1))), 16));
    window_val_4_2_fu_1746_p0 <= window_val_4_2_fu_1746_p00(8 - 1 downto 0);
    window_val_4_2_fu_1746_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_4_load_3_reg_2472),16));
    window_val_4_2_fu_1746_p1 <= reg_744;
    window_val_4_2_fu_1746_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_4_2_fu_1746_p0) * signed(window_val_4_2_fu_1746_p1))), 16));
    window_val_4_3_fu_1775_p0 <= window_val_4_3_fu_1775_p00(8 - 1 downto 0);
    window_val_4_3_fu_1775_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_4_load_4_reg_2451),16));
    window_val_4_3_fu_1775_p1 <= reg_748;
    window_val_4_3_fu_1775_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_4_3_fu_1775_p0) * signed(window_val_4_3_fu_1775_p1))), 16));
    window_val_4_4_fu_1599_p0 <= window_val_4_4_fu_1599_p00(8 - 1 downto 0);
    window_val_4_4_fu_1599_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_4_load_5_reg_2415),16));
    window_val_4_4_fu_1599_p1 <= kernel_q0;
    window_val_4_4_fu_1599_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &window_val_4_4_fu_1599_p0) * signed(window_val_4_4_fu_1599_p1))), 16));
end behav;
