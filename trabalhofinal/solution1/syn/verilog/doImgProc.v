// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="doImgProc,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35tcpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.668000,HLS_SYN_LAT=1920007,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=0,HLS_SYN_FF=1735,HLS_SYN_LUT=3887}" *)

module doImgProc (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt,
        s_axi_KERNEL_BUS_AWVALID,
        s_axi_KERNEL_BUS_AWREADY,
        s_axi_KERNEL_BUS_AWADDR,
        s_axi_KERNEL_BUS_WVALID,
        s_axi_KERNEL_BUS_WREADY,
        s_axi_KERNEL_BUS_WDATA,
        s_axi_KERNEL_BUS_WSTRB,
        s_axi_KERNEL_BUS_ARVALID,
        s_axi_KERNEL_BUS_ARREADY,
        s_axi_KERNEL_BUS_ARADDR,
        s_axi_KERNEL_BUS_RVALID,
        s_axi_KERNEL_BUS_RREADY,
        s_axi_KERNEL_BUS_RDATA,
        s_axi_KERNEL_BUS_RRESP,
        s_axi_KERNEL_BUS_BVALID,
        s_axi_KERNEL_BUS_BREADY,
        s_axi_KERNEL_BUS_BRESP
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_pp0_stage0 = 27'd2;
parameter    ap_ST_fsm_pp0_stage1 = 27'd4;
parameter    ap_ST_fsm_pp0_stage2 = 27'd8;
parameter    ap_ST_fsm_pp0_stage3 = 27'd16;
parameter    ap_ST_fsm_pp0_stage4 = 27'd32;
parameter    ap_ST_fsm_pp0_stage5 = 27'd64;
parameter    ap_ST_fsm_pp0_stage6 = 27'd128;
parameter    ap_ST_fsm_pp0_stage7 = 27'd256;
parameter    ap_ST_fsm_pp0_stage8 = 27'd512;
parameter    ap_ST_fsm_pp0_stage9 = 27'd1024;
parameter    ap_ST_fsm_pp0_stage10 = 27'd2048;
parameter    ap_ST_fsm_pp0_stage11 = 27'd4096;
parameter    ap_ST_fsm_pp0_stage12 = 27'd8192;
parameter    ap_ST_fsm_pp0_stage13 = 27'd16384;
parameter    ap_ST_fsm_pp0_stage14 = 27'd32768;
parameter    ap_ST_fsm_pp0_stage15 = 27'd65536;
parameter    ap_ST_fsm_pp0_stage16 = 27'd131072;
parameter    ap_ST_fsm_pp0_stage17 = 27'd262144;
parameter    ap_ST_fsm_pp0_stage18 = 27'd524288;
parameter    ap_ST_fsm_pp0_stage19 = 27'd1048576;
parameter    ap_ST_fsm_pp0_stage20 = 27'd2097152;
parameter    ap_ST_fsm_pp0_stage21 = 27'd4194304;
parameter    ap_ST_fsm_pp0_stage22 = 27'd8388608;
parameter    ap_ST_fsm_pp0_stage23 = 27'd16777216;
parameter    ap_ST_fsm_pp0_stage24 = 27'd33554432;
parameter    ap_ST_fsm_state33 = 27'd67108864;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_KERNEL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_KERNEL_BUS_ADDR_WIDTH = 6;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_KERNEL_BUS_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [0:0] inStream_TKEEP;
input  [0:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [7:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [0:0] outStream_TKEEP;
output  [0:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;
input   s_axi_KERNEL_BUS_AWVALID;
output   s_axi_KERNEL_BUS_AWREADY;
input  [C_S_AXI_KERNEL_BUS_ADDR_WIDTH - 1:0] s_axi_KERNEL_BUS_AWADDR;
input   s_axi_KERNEL_BUS_WVALID;
output   s_axi_KERNEL_BUS_WREADY;
input  [C_S_AXI_KERNEL_BUS_DATA_WIDTH - 1:0] s_axi_KERNEL_BUS_WDATA;
input  [C_S_AXI_KERNEL_BUS_WSTRB_WIDTH - 1:0] s_axi_KERNEL_BUS_WSTRB;
input   s_axi_KERNEL_BUS_ARVALID;
output   s_axi_KERNEL_BUS_ARREADY;
input  [C_S_AXI_KERNEL_BUS_ADDR_WIDTH - 1:0] s_axi_KERNEL_BUS_ARADDR;
output   s_axi_KERNEL_BUS_RVALID;
input   s_axi_KERNEL_BUS_RREADY;
output  [C_S_AXI_KERNEL_BUS_DATA_WIDTH - 1:0] s_axi_KERNEL_BUS_RDATA;
output  [1:0] s_axi_KERNEL_BUS_RRESP;
output   s_axi_KERNEL_BUS_BVALID;
input   s_axi_KERNEL_BUS_BREADY;
output  [1:0] s_axi_KERNEL_BUS_BRESP;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] inStream_V_data_V_0_data_out;
wire    inStream_V_data_V_0_vld_in;
wire    inStream_V_data_V_0_vld_out;
wire    inStream_V_data_V_0_ack_in;
reg    inStream_V_data_V_0_ack_out;
reg   [7:0] inStream_V_data_V_0_payload_A;
reg   [7:0] inStream_V_data_V_0_payload_B;
reg    inStream_V_data_V_0_sel_rd;
reg    inStream_V_data_V_0_sel_wr;
wire    inStream_V_data_V_0_sel;
wire    inStream_V_data_V_0_load_A;
wire    inStream_V_data_V_0_load_B;
reg   [1:0] inStream_V_data_V_0_state;
wire    inStream_V_data_V_0_state_cmp_full;
reg   [0:0] inStream_V_keep_V_0_data_out;
wire    inStream_V_keep_V_0_vld_in;
wire    inStream_V_keep_V_0_vld_out;
wire    inStream_V_keep_V_0_ack_in;
reg    inStream_V_keep_V_0_ack_out;
reg   [0:0] inStream_V_keep_V_0_payload_A;
reg   [0:0] inStream_V_keep_V_0_payload_B;
reg    inStream_V_keep_V_0_sel_rd;
reg    inStream_V_keep_V_0_sel_wr;
wire    inStream_V_keep_V_0_sel;
wire    inStream_V_keep_V_0_load_A;
wire    inStream_V_keep_V_0_load_B;
reg   [1:0] inStream_V_keep_V_0_state;
wire    inStream_V_keep_V_0_state_cmp_full;
reg   [0:0] inStream_V_strb_V_0_data_out;
wire    inStream_V_strb_V_0_vld_in;
wire    inStream_V_strb_V_0_vld_out;
wire    inStream_V_strb_V_0_ack_in;
reg    inStream_V_strb_V_0_ack_out;
reg   [0:0] inStream_V_strb_V_0_payload_A;
reg   [0:0] inStream_V_strb_V_0_payload_B;
reg    inStream_V_strb_V_0_sel_rd;
reg    inStream_V_strb_V_0_sel_wr;
wire    inStream_V_strb_V_0_sel;
wire    inStream_V_strb_V_0_load_A;
wire    inStream_V_strb_V_0_load_B;
reg   [1:0] inStream_V_strb_V_0_state;
wire    inStream_V_strb_V_0_state_cmp_full;
reg   [1:0] inStream_V_user_V_0_data_out;
wire    inStream_V_user_V_0_vld_in;
wire    inStream_V_user_V_0_vld_out;
wire    inStream_V_user_V_0_ack_in;
reg    inStream_V_user_V_0_ack_out;
reg   [1:0] inStream_V_user_V_0_payload_A;
reg   [1:0] inStream_V_user_V_0_payload_B;
reg    inStream_V_user_V_0_sel_rd;
reg    inStream_V_user_V_0_sel_wr;
wire    inStream_V_user_V_0_sel;
wire    inStream_V_user_V_0_load_A;
wire    inStream_V_user_V_0_load_B;
reg   [1:0] inStream_V_user_V_0_state;
wire    inStream_V_user_V_0_state_cmp_full;
reg   [0:0] inStream_V_last_V_0_data_out;
wire    inStream_V_last_V_0_vld_in;
wire    inStream_V_last_V_0_vld_out;
wire    inStream_V_last_V_0_ack_in;
reg    inStream_V_last_V_0_ack_out;
reg   [0:0] inStream_V_last_V_0_payload_A;
reg   [0:0] inStream_V_last_V_0_payload_B;
reg    inStream_V_last_V_0_sel_rd;
reg    inStream_V_last_V_0_sel_wr;
wire    inStream_V_last_V_0_sel;
wire    inStream_V_last_V_0_load_A;
wire    inStream_V_last_V_0_load_B;
reg   [1:0] inStream_V_last_V_0_state;
wire    inStream_V_last_V_0_state_cmp_full;
reg   [5:0] inStream_V_dest_V_0_data_out;
wire    inStream_V_dest_V_0_vld_in;
wire    inStream_V_dest_V_0_vld_out;
wire    inStream_V_dest_V_0_ack_in;
reg    inStream_V_dest_V_0_ack_out;
reg   [5:0] inStream_V_dest_V_0_payload_A;
reg   [5:0] inStream_V_dest_V_0_payload_B;
reg    inStream_V_dest_V_0_sel_rd;
reg    inStream_V_dest_V_0_sel_wr;
wire    inStream_V_dest_V_0_sel;
wire    inStream_V_dest_V_0_load_A;
wire    inStream_V_dest_V_0_load_B;
reg   [1:0] inStream_V_dest_V_0_state;
wire    inStream_V_dest_V_0_state_cmp_full;
reg   [7:0] outStream_V_data_V_1_data_out;
reg    outStream_V_data_V_1_vld_in;
wire    outStream_V_data_V_1_vld_out;
wire    outStream_V_data_V_1_ack_in;
wire    outStream_V_data_V_1_ack_out;
reg   [7:0] outStream_V_data_V_1_payload_A;
reg   [7:0] outStream_V_data_V_1_payload_B;
reg    outStream_V_data_V_1_sel_rd;
reg    outStream_V_data_V_1_sel_wr;
wire    outStream_V_data_V_1_sel;
wire    outStream_V_data_V_1_load_A;
wire    outStream_V_data_V_1_load_B;
reg   [1:0] outStream_V_data_V_1_state;
wire    outStream_V_data_V_1_state_cmp_full;
reg   [0:0] outStream_V_keep_V_1_data_out;
reg    outStream_V_keep_V_1_vld_in;
wire    outStream_V_keep_V_1_vld_out;
wire    outStream_V_keep_V_1_ack_in;
wire    outStream_V_keep_V_1_ack_out;
reg   [0:0] outStream_V_keep_V_1_payload_A;
reg   [0:0] outStream_V_keep_V_1_payload_B;
reg    outStream_V_keep_V_1_sel_rd;
reg    outStream_V_keep_V_1_sel_wr;
wire    outStream_V_keep_V_1_sel;
wire    outStream_V_keep_V_1_load_A;
wire    outStream_V_keep_V_1_load_B;
reg   [1:0] outStream_V_keep_V_1_state;
wire    outStream_V_keep_V_1_state_cmp_full;
reg   [0:0] outStream_V_strb_V_1_data_out;
reg    outStream_V_strb_V_1_vld_in;
wire    outStream_V_strb_V_1_vld_out;
wire    outStream_V_strb_V_1_ack_in;
wire    outStream_V_strb_V_1_ack_out;
reg   [0:0] outStream_V_strb_V_1_payload_A;
reg   [0:0] outStream_V_strb_V_1_payload_B;
reg    outStream_V_strb_V_1_sel_rd;
reg    outStream_V_strb_V_1_sel_wr;
wire    outStream_V_strb_V_1_sel;
wire    outStream_V_strb_V_1_load_A;
wire    outStream_V_strb_V_1_load_B;
reg   [1:0] outStream_V_strb_V_1_state;
wire    outStream_V_strb_V_1_state_cmp_full;
reg   [1:0] outStream_V_user_V_1_data_out;
reg    outStream_V_user_V_1_vld_in;
wire    outStream_V_user_V_1_vld_out;
wire    outStream_V_user_V_1_ack_in;
wire    outStream_V_user_V_1_ack_out;
reg   [1:0] outStream_V_user_V_1_payload_A;
reg   [1:0] outStream_V_user_V_1_payload_B;
reg    outStream_V_user_V_1_sel_rd;
reg    outStream_V_user_V_1_sel_wr;
wire    outStream_V_user_V_1_sel;
wire    outStream_V_user_V_1_load_A;
wire    outStream_V_user_V_1_load_B;
reg   [1:0] outStream_V_user_V_1_state;
wire    outStream_V_user_V_1_state_cmp_full;
reg   [0:0] outStream_V_last_V_1_data_out;
reg    outStream_V_last_V_1_vld_in;
wire    outStream_V_last_V_1_vld_out;
wire    outStream_V_last_V_1_ack_in;
wire    outStream_V_last_V_1_ack_out;
reg   [0:0] outStream_V_last_V_1_payload_A;
reg   [0:0] outStream_V_last_V_1_payload_B;
reg    outStream_V_last_V_1_sel_rd;
reg    outStream_V_last_V_1_sel_wr;
wire    outStream_V_last_V_1_sel;
wire    outStream_V_last_V_1_load_A;
wire    outStream_V_last_V_1_load_B;
reg   [1:0] outStream_V_last_V_1_state;
wire    outStream_V_last_V_1_state_cmp_full;
wire   [4:0] outStream_V_id_V_1_data_out;
reg    outStream_V_id_V_1_vld_in;
wire    outStream_V_id_V_1_vld_out;
wire    outStream_V_id_V_1_ack_in;
wire    outStream_V_id_V_1_ack_out;
reg    outStream_V_id_V_1_sel_rd;
wire    outStream_V_id_V_1_sel;
reg   [1:0] outStream_V_id_V_1_state;
reg   [5:0] outStream_V_dest_V_1_data_out;
reg    outStream_V_dest_V_1_vld_in;
wire    outStream_V_dest_V_1_vld_out;
wire    outStream_V_dest_V_1_ack_in;
wire    outStream_V_dest_V_1_ack_out;
reg   [5:0] outStream_V_dest_V_1_payload_A;
reg   [5:0] outStream_V_dest_V_1_payload_B;
reg    outStream_V_dest_V_1_sel_rd;
reg    outStream_V_dest_V_1_sel_wr;
wire    outStream_V_dest_V_1_sel;
wire    outStream_V_dest_V_1_load_A;
wire    outStream_V_dest_V_1_load_B;
reg   [1:0] outStream_V_dest_V_1_state;
wire    outStream_V_dest_V_1_state_cmp_full;
reg   [4:0] kernel_address0;
reg    kernel_ce0;
wire   [7:0] kernel_q0;
wire   [31:0] operation;
reg    inStream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage2;
reg   [0:0] exitcond1_reg_2073;
reg    outStream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage4;
reg   [0:0] exitcond1_reg_2073_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
reg   [31:0] idxRow_reg_699;
reg   [31:0] col_assign_reg_710;
reg   [31:0] pixProcessed_reg_721;
reg   [16:0] idxPixel_reg_733;
reg   [7:0] reg_744;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state28_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state30_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_state32_pp0_stage5_iter1;
reg    ap_block_state32_io;
reg    ap_block_pp0_stage5_11001;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state11_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state13_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_state15_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_11001;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_state17_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_11001;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_block_state19_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_11001;
wire    ap_CS_fsm_pp0_stage19;
wire    ap_block_state21_pp0_stage19_iter0;
wire    ap_block_pp0_stage19_11001;
wire    ap_CS_fsm_pp0_stage21;
wire    ap_block_state23_pp0_stage21_iter0;
wire    ap_block_pp0_stage21_11001;
wire    ap_CS_fsm_pp0_stage24;
wire    ap_block_state26_pp0_stage24_iter0;
wire    ap_block_pp0_stage24_11001;
reg   [7:0] reg_748;
reg    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state29_pp0_stage2_iter1;
reg    ap_block_pp0_stage2_11001;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state31_pp0_stage4_iter1;
reg    ap_block_state31_io;
reg    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state10_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state12_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state14_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_11001;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state16_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_11001;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_state18_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_11001;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_state20_pp0_stage18_iter0;
wire    ap_block_pp0_stage18_11001;
wire    ap_CS_fsm_pp0_stage20;
wire    ap_block_state22_pp0_stage20_iter0;
wire    ap_block_pp0_stage20_11001;
wire    ap_CS_fsm_pp0_stage23;
wire    ap_block_state25_pp0_stage23_iter0;
wire    ap_block_pp0_stage23_11001;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state27_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] lineBuff_val_0_q1;
reg   [7:0] reg_752;
wire   [0:0] sel_tmp2_fu_756_p2;
reg   [0:0] sel_tmp2_reg_2058;
wire   [0:0] sel_tmp5_fu_762_p2;
reg   [0:0] sel_tmp5_reg_2063;
wire   [0:0] sel_tmp8_fu_768_p2;
reg   [0:0] sel_tmp8_reg_2068;
wire   [0:0] exitcond1_fu_774_p2;
wire   [16:0] idxPixel_1_fu_780_p2;
reg   [16:0] idxPixel_1_reg_2077;
wire   [63:0] tmp_s_fu_786_p1;
reg   [63:0] tmp_s_reg_2082;
reg   [7:0] lineBuff_val_1_addr_reg_2087;
reg   [7:0] lineBuff_val_2_addr_reg_2092;
reg   [7:0] lineBuff_val_3_addr_reg_2097;
reg   [7:0] lineBuff_val_4_addr_reg_2102;
wire   [0:0] or_cond_fu_826_p2;
reg   [0:0] or_cond_reg_2107;
wire   [0:0] tmp_6_fu_832_p2;
reg   [0:0] tmp_6_reg_2115;
wire   [31:0] idxCol_fu_838_p2;
reg   [31:0] idxCol_reg_2121;
wire   [31:0] idxRow_1_fu_850_p3;
reg   [31:0] idxRow_1_reg_2126;
reg   [0:0] tmp_keep_V_reg_2131;
reg   [0:0] tmp_keep_V_reg_2131_pp0_iter1_reg;
reg   [0:0] tmp_strb_V_reg_2136;
reg   [0:0] tmp_strb_V_reg_2136_pp0_iter1_reg;
reg   [1:0] tmp_user_V_reg_2141;
reg   [1:0] tmp_user_V_reg_2141_pp0_iter1_reg;
reg   [0:0] tmp_last_V_reg_2146;
reg   [0:0] tmp_last_V_reg_2146_pp0_iter1_reg;
reg   [5:0] tmp_dest_V_reg_2151;
reg   [5:0] tmp_dest_V_reg_2151_pp0_iter1_reg;
wire   [63:0] tmp_5_fu_883_p1;
reg   [63:0] tmp_5_reg_2156;
wire   [63:0] tmp_27_0_1_fu_897_p1;
reg   [63:0] tmp_27_0_1_reg_2166;
wire   [0:0] sel_tmp3_fu_912_p2;
reg   [0:0] sel_tmp3_reg_2206;
reg   [0:0] sel_tmp3_reg_2206_pp0_iter1_reg;
wire   [0:0] sel_tmp6_fu_924_p2;
reg   [0:0] sel_tmp6_reg_2211;
reg   [0:0] sel_tmp6_reg_2211_pp0_iter1_reg;
wire   [0:0] sel_tmp9_fu_936_p2;
reg   [0:0] sel_tmp9_reg_2216;
reg   [0:0] sel_tmp9_reg_2216_pp0_iter1_reg;
wire   [31:0] idxCol_1_fu_948_p3;
reg   [31:0] idxCol_1_reg_2221;
wire   [31:0] pixProcessed_2_fu_954_p3;
reg   [31:0] pixProcessed_2_reg_2226;
wire   [15:0] window_val_0_0_fu_969_p2;
reg   [15:0] window_val_0_0_reg_2231;
wire   [63:0] tmp_27_0_2_fu_981_p1;
reg   [63:0] tmp_27_0_2_reg_2236;
wire   [63:0] tmp_27_0_3_fu_995_p1;
reg   [63:0] tmp_27_0_3_reg_2246;
wire   [63:0] tmp_27_0_4_fu_1009_p1;
reg   [63:0] tmp_27_0_4_reg_2256;
wire   [7:0] lineBuff_val_1_q0;
reg   [7:0] lineBuff_val_1_load_1_reg_2264;
wire   [7:0] lineBuff_val_1_q1;
reg   [7:0] lineBuff_val_1_load_2_reg_2269;
wire   [7:0] lineBuff_val_2_q0;
reg   [7:0] lineBuff_val_2_load_1_reg_2284;
wire   [7:0] lineBuff_val_2_q1;
reg   [7:0] lineBuff_val_2_load_2_reg_2289;
wire   [7:0] lineBuff_val_3_q0;
reg   [7:0] lineBuff_val_3_load_1_reg_2304;
wire   [7:0] lineBuff_val_3_q1;
reg   [7:0] lineBuff_val_3_load_2_reg_2309;
wire   [7:0] tmp_28_fu_1014_p1;
reg   [7:0] tmp_28_reg_2334;
wire   [15:0] window_val_0_1_fu_1026_p2;
reg   [15:0] window_val_0_1_reg_2340;
wire   [7:0] lineBuff_val_0_q0;
reg   [7:0] lineBuff_val_0_load_3_reg_2345;
reg   [7:0] lineBuff_val_1_load_3_reg_2355;
reg   [7:0] lineBuff_val_1_load_4_reg_2360;
reg   [7:0] lineBuff_val_2_load_3_reg_2370;
reg   [7:0] lineBuff_val_2_load_4_reg_2375;
reg   [7:0] lineBuff_val_3_load_3_reg_2385;
reg   [7:0] lineBuff_val_3_load_4_reg_2390;
wire   [7:0] lineBuff_val_4_q0;
reg   [7:0] lineBuff_val_4_load_1_reg_2400;
wire   [7:0] lineBuff_val_4_q1;
reg   [7:0] lineBuff_val_4_load_5_reg_2415;
wire   [7:0] valInWindow_0_minVal_fu_1041_p3;
reg   [7:0] valInWindow_0_minVal_reg_2420;
reg   [7:0] lineBuff_val_1_load_5_reg_2426;
reg   [7:0] lineBuff_val_2_load_5_reg_2431;
reg   [7:0] lineBuff_val_3_load_5_reg_2436;
reg   [7:0] lineBuff_val_4_load_2_reg_2441;
reg   [7:0] lineBuff_val_4_load_4_reg_2451;
wire   [15:0] tmp13_fu_1067_p2;
reg   [15:0] tmp13_reg_2456;
wire   [7:0] valInWindow_0_minVal_1_fu_1081_p3;
reg   [7:0] valInWindow_0_minVal_1_reg_2461;
wire   [15:0] window_val_0_3_fu_1095_p2;
reg   [15:0] window_val_0_3_reg_2467;
reg   [7:0] lineBuff_val_4_load_3_reg_2472;
wire   [7:0] valInWindow_0_minVal_2_fu_1110_p3;
reg   [7:0] valInWindow_0_minVal_2_reg_2477;
wire   [15:0] window_val_0_4_fu_1125_p2;
reg   [15:0] window_val_0_4_reg_2483;
wire   [7:0] valInWindow_0_minVal_3_fu_1140_p3;
reg   [7:0] valInWindow_0_minVal_3_reg_2488;
wire   [15:0] tmp15_fu_1165_p2;
reg   [15:0] tmp15_reg_2494;
wire   [7:0] valInWindow_0_minVal_4_fu_1179_p3;
reg   [7:0] valInWindow_0_minVal_4_reg_2499;
wire   [15:0] window_val_1_1_fu_1193_p2;
reg   [15:0] window_val_1_1_reg_2505;
wire   [7:0] valInWindow_0_minVal_5_fu_1208_p3;
reg   [7:0] valInWindow_0_minVal_5_reg_2510;
wire   [15:0] window_val_1_2_fu_1222_p2;
reg   [15:0] window_val_1_2_reg_2516;
wire   [7:0] valInWindow_0_minVal_6_fu_1237_p3;
reg   [7:0] valInWindow_0_minVal_6_reg_2521;
wire   [15:0] tmp17_fu_1257_p2;
reg   [15:0] tmp17_reg_2527;
wire   [7:0] valInWindow_0_minVal_7_fu_1271_p3;
reg   [7:0] valInWindow_0_minVal_7_reg_2532;
wire   [15:0] window_val_1_4_fu_1285_p2;
reg   [15:0] window_val_1_4_reg_2538;
wire   [7:0] valInWindow_0_minVal_8_fu_1300_p3;
reg   [7:0] valInWindow_0_minVal_8_reg_2543;
wire   [15:0] window_val_2_0_fu_1314_p2;
reg   [15:0] window_val_2_0_reg_2549;
wire   [7:0] valInWindow_0_minVal_9_fu_1329_p3;
reg   [7:0] valInWindow_0_minVal_9_reg_2554;
wire   [15:0] window_val_2_1_fu_1343_p2;
reg   [15:0] window_val_2_1_reg_2560;
wire   [7:0] valInWindow_0_minVal_23_fu_1358_p3;
reg   [7:0] valInWindow_0_minVal_23_reg_2565;
wire   [15:0] window_val_2_2_fu_1372_p2;
reg   [15:0] window_val_2_2_reg_2571;
wire   [7:0] valInWindow_0_minVal_10_fu_1387_p3;
reg   [7:0] valInWindow_0_minVal_10_reg_2576;
wire   [15:0] window_val_2_3_fu_1401_p2;
reg   [15:0] window_val_2_3_reg_2582;
wire   [7:0] valInWindow_0_minVal_11_fu_1416_p3;
reg   [7:0] valInWindow_0_minVal_11_reg_2587;
wire   [15:0] tmp6_fu_1436_p2;
reg   [15:0] tmp6_reg_2593;
wire   [7:0] valInWindow_0_minVal_12_fu_1450_p3;
reg   [7:0] valInWindow_0_minVal_12_reg_2598;
wire   [15:0] window_val_3_0_fu_1464_p2;
reg   [15:0] window_val_3_0_reg_2604;
wire   [7:0] valInWindow_0_minVal_13_fu_1479_p3;
reg   [7:0] valInWindow_0_minVal_13_reg_2609;
wire   [15:0] window_val_3_1_fu_1493_p2;
reg   [15:0] window_val_3_1_reg_2615;
wire   [7:0] valInWindow_0_minVal_14_fu_1508_p3;
reg   [7:0] valInWindow_0_minVal_14_reg_2620;
wire   [15:0] tmp9_fu_1533_p2;
reg   [15:0] tmp9_reg_2626;
wire   [7:0] valInWindow_0_minVal_15_fu_1547_p3;
reg   [7:0] valInWindow_0_minVal_15_reg_2631;
wire   [15:0] window_val_3_3_fu_1561_p2;
reg   [15:0] window_val_3_3_reg_2637;
wire   [15:0] tmp10_fu_1571_p2;
reg   [15:0] tmp10_reg_2642;
wire   [7:0] valInWindow_0_minVal_16_fu_1585_p3;
reg   [7:0] valInWindow_0_minVal_16_reg_2647;
wire   [15:0] tmp20_fu_1605_p2;
reg   [15:0] tmp20_reg_2653;
wire    ap_CS_fsm_pp0_stage22;
wire    ap_block_state24_pp0_stage22_iter0;
wire    ap_block_pp0_stage22_11001;
wire   [7:0] tmp_52_fu_1610_p1;
reg   [7:0] tmp_52_reg_2658;
wire   [15:0] window_val_3_4_fu_1621_p2;
reg   [15:0] window_val_3_4_reg_2664;
wire   [15:0] tmp22_fu_1640_p2;
reg   [15:0] tmp22_reg_2669;
wire   [7:0] valInWindow_0_minVal_17_fu_1655_p3;
reg   [7:0] valInWindow_0_minVal_17_reg_2674;
wire   [15:0] tmp4_fu_1680_p2;
reg   [15:0] tmp4_reg_2680;
wire   [15:0] tmp23_fu_1689_p2;
reg   [15:0] tmp23_reg_2685;
wire   [7:0] valInWindow_0_minVal_18_fu_1703_p3;
reg   [7:0] valInWindow_0_minVal_18_reg_2690;
wire   [15:0] window_val_4_1_fu_1717_p2;
reg   [15:0] window_val_4_1_reg_2696;
wire   [7:0] valInWindow_0_minVal_19_fu_1732_p3;
reg   [7:0] valInWindow_0_minVal_19_reg_2701;
wire   [15:0] window_val_4_2_fu_1746_p2;
reg   [15:0] window_val_4_2_reg_2707;
wire   [7:0] valInWindow_0_minVal_20_fu_1761_p3;
reg   [7:0] valInWindow_0_minVal_20_reg_2712;
wire   [15:0] tmp1_fu_1781_p2;
reg   [15:0] tmp1_reg_2718;
wire   [7:0] valInWindow_0_minVal_21_fu_1795_p3;
reg   [7:0] valInWindow_0_minVal_21_reg_2723;
wire  signed [15:0] valOutput_fu_1816_p2;
reg  signed [15:0] valOutput_reg_2729;
reg   [0:0] tmp_25_reg_2734;
reg   [12:0] tmp_7_reg_2739;
wire   [7:0] sel_tmp_fu_1856_p3;
reg   [7:0] sel_tmp_reg_2744;
wire   [7:0] dataOutSideChannel_d_fu_1926_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage24_subdone;
reg    ap_block_pp0_stage5_subdone;
reg   [7:0] lineBuff_val_0_address0;
reg    lineBuff_val_0_ce0;
reg    lineBuff_val_0_we0;
reg   [7:0] lineBuff_val_0_address1;
reg    lineBuff_val_0_ce1;
reg   [7:0] lineBuff_val_1_address0;
reg    lineBuff_val_1_ce0;
reg    lineBuff_val_1_we0;
reg   [7:0] lineBuff_val_1_address1;
reg    lineBuff_val_1_ce1;
reg   [7:0] lineBuff_val_2_address0;
reg    lineBuff_val_2_ce0;
reg    lineBuff_val_2_we0;
reg   [7:0] lineBuff_val_2_address1;
reg    lineBuff_val_2_ce1;
reg   [7:0] lineBuff_val_3_address0;
reg    lineBuff_val_3_ce0;
reg    lineBuff_val_3_we0;
reg   [7:0] lineBuff_val_3_address1;
reg    lineBuff_val_3_ce1;
reg   [7:0] lineBuff_val_4_address0;
reg    lineBuff_val_4_ce0;
reg    lineBuff_val_4_we0;
reg   [7:0] lineBuff_val_4_address1;
reg    lineBuff_val_4_ce1;
reg   [31:0] ap_phi_mux_idxRow_phi_fu_703_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_col_assign_phi_fu_714_p4;
reg   [31:0] ap_phi_mux_pixProcessed_phi_fu_725_p4;
reg   [16:0] ap_phi_mux_idxPixel_phi_fu_737_p4;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4_01001;
wire    ap_block_pp0_stage5_01001;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage8;
wire    ap_block_pp0_stage9;
wire    ap_block_pp0_stage10;
wire    ap_block_pp0_stage11;
wire    ap_block_pp0_stage12;
wire    ap_block_pp0_stage13;
wire    ap_block_pp0_stage14;
wire    ap_block_pp0_stage15;
wire    ap_block_pp0_stage16;
wire    ap_block_pp0_stage17;
wire    ap_block_pp0_stage18;
wire    ap_block_pp0_stage19;
wire    ap_block_pp0_stage20;
wire    ap_block_pp0_stage21;
wire    ap_block_pp0_stage22;
wire    ap_block_pp0_stage23;
wire    ap_block_pp0_stage24;
wire   [29:0] tmp_1_fu_794_p4;
wire   [29:0] tmp_2_fu_810_p4;
wire   [0:0] icmp_fu_804_p2;
wire   [0:0] icmp4_fu_820_p2;
wire   [31:0] idxRow_2_fu_844_p2;
wire   [31:0] pixProcessed_3_fu_891_p2;
wire   [31:0] sel_tmp1_fu_905_p3;
wire   [31:0] sel_tmp4_fu_916_p3;
wire   [31:0] sel_tmp7_fu_928_p3;
wire   [31:0] pixProcessed_1_fu_940_p3;
wire   [7:0] window_val_0_0_fu_969_p0;
wire  signed [7:0] window_val_0_0_fu_969_p1;
wire   [31:0] col_assign_1_0_2_fu_975_p2;
wire   [31:0] col_assign_1_0_3_fu_989_p2;
wire   [31:0] col_assign_1_0_4_fu_1003_p2;
wire   [7:0] window_val_0_1_fu_1026_p0;
wire  signed [7:0] window_val_0_1_fu_1026_p1;
wire   [7:0] tmp_29_fu_1032_p1;
wire   [0:0] tmp_5_0_1_i_fu_1036_p2;
wire   [7:0] window_val_0_2_fu_1056_p0;
wire  signed [7:0] window_val_0_2_fu_1056_p1;
wire   [15:0] window_val_0_2_fu_1056_p2;
wire   [15:0] tmp12_fu_1062_p2;
wire   [7:0] tmp_30_fu_1072_p1;
wire   [0:0] tmp_5_0_2_i_fu_1076_p2;
wire   [7:0] window_val_0_3_fu_1095_p0;
wire  signed [7:0] window_val_0_3_fu_1095_p1;
wire   [7:0] tmp_31_fu_1101_p1;
wire   [0:0] tmp_5_0_3_i_fu_1105_p2;
wire   [7:0] window_val_0_4_fu_1125_p0;
wire  signed [7:0] window_val_0_4_fu_1125_p1;
wire   [7:0] tmp_32_fu_1131_p1;
wire   [0:0] tmp_5_0_4_i_fu_1135_p2;
wire   [7:0] window_val_1_0_fu_1154_p0;
wire  signed [7:0] window_val_1_0_fu_1154_p1;
wire   [15:0] window_val_1_0_fu_1154_p2;
wire   [15:0] tmp14_fu_1160_p2;
wire   [7:0] tmp_33_fu_1170_p1;
wire   [0:0] tmp_5_1_i_fu_1174_p2;
wire   [7:0] window_val_1_1_fu_1193_p0;
wire  signed [7:0] window_val_1_1_fu_1193_p1;
wire   [7:0] tmp_34_fu_1199_p1;
wire   [0:0] tmp_5_1_1_i_fu_1203_p2;
wire   [7:0] window_val_1_2_fu_1222_p0;
wire  signed [7:0] window_val_1_2_fu_1222_p1;
wire   [7:0] tmp_35_fu_1228_p1;
wire   [0:0] tmp_5_1_2_i_fu_1232_p2;
wire   [7:0] window_val_1_3_fu_1251_p0;
wire  signed [7:0] window_val_1_3_fu_1251_p1;
wire   [15:0] window_val_1_3_fu_1251_p2;
wire   [7:0] tmp_36_fu_1262_p1;
wire   [0:0] tmp_5_1_3_i_fu_1266_p2;
wire   [7:0] window_val_1_4_fu_1285_p0;
wire  signed [7:0] window_val_1_4_fu_1285_p1;
wire   [7:0] tmp_37_fu_1291_p1;
wire   [0:0] tmp_5_1_4_i_fu_1295_p2;
wire   [7:0] window_val_2_0_fu_1314_p0;
wire  signed [7:0] window_val_2_0_fu_1314_p1;
wire   [7:0] tmp_38_fu_1320_p1;
wire   [0:0] tmp_5_2_i_fu_1324_p2;
wire   [7:0] window_val_2_1_fu_1343_p0;
wire  signed [7:0] window_val_2_1_fu_1343_p1;
wire   [7:0] tmp_39_fu_1349_p1;
wire   [0:0] tmp_5_2_1_i_fu_1353_p2;
wire   [7:0] window_val_2_2_fu_1372_p0;
wire  signed [7:0] window_val_2_2_fu_1372_p1;
wire   [7:0] tmp_40_fu_1378_p1;
wire   [0:0] tmp_5_2_2_i_fu_1382_p2;
wire   [7:0] window_val_2_3_fu_1401_p0;
wire  signed [7:0] window_val_2_3_fu_1401_p1;
wire   [7:0] tmp_41_fu_1407_p1;
wire   [0:0] tmp_5_2_3_i_fu_1411_p2;
wire   [7:0] window_val_2_4_fu_1430_p0;
wire  signed [7:0] window_val_2_4_fu_1430_p1;
wire   [15:0] window_val_2_4_fu_1430_p2;
wire   [7:0] tmp_42_fu_1441_p1;
wire   [0:0] tmp_5_2_4_i_fu_1445_p2;
wire   [7:0] window_val_3_0_fu_1464_p0;
wire  signed [7:0] window_val_3_0_fu_1464_p1;
wire   [7:0] tmp_43_fu_1470_p1;
wire   [0:0] tmp_5_3_i_fu_1474_p2;
wire   [7:0] window_val_3_1_fu_1493_p0;
wire  signed [7:0] window_val_3_1_fu_1493_p1;
wire   [7:0] tmp_44_fu_1499_p1;
wire   [0:0] tmp_5_3_1_i_fu_1503_p2;
wire   [7:0] window_val_3_2_fu_1522_p0;
wire  signed [7:0] window_val_3_2_fu_1522_p1;
wire   [15:0] window_val_3_2_fu_1522_p2;
wire   [15:0] tmp8_fu_1528_p2;
wire   [7:0] tmp_45_fu_1538_p1;
wire   [0:0] tmp_5_3_2_i_fu_1542_p2;
wire   [7:0] window_val_3_3_fu_1561_p0;
wire  signed [7:0] window_val_3_3_fu_1561_p1;
wire   [15:0] tmp7_fu_1567_p2;
wire   [7:0] tmp_46_fu_1576_p1;
wire   [0:0] tmp_5_3_3_i_fu_1580_p2;
wire   [7:0] window_val_4_4_fu_1599_p0;
wire  signed [7:0] window_val_4_4_fu_1599_p1;
wire   [15:0] window_val_4_4_fu_1599_p2;
wire   [7:0] window_val_3_4_fu_1621_p0;
wire  signed [7:0] window_val_3_4_fu_1621_p1;
wire   [15:0] tmp19_fu_1631_p2;
wire   [15:0] tmp21_fu_1635_p2;
wire   [15:0] tmp18_fu_1627_p2;
wire   [7:0] tmp_47_fu_1646_p1;
wire   [0:0] tmp_5_3_4_i_fu_1650_p2;
wire   [7:0] window_val_4_0_fu_1669_p0;
wire  signed [7:0] window_val_4_0_fu_1669_p1;
wire   [15:0] window_val_4_0_fu_1669_p2;
wire   [15:0] tmp3_fu_1675_p2;
wire   [15:0] tmp16_fu_1685_p2;
wire   [7:0] tmp_48_fu_1694_p1;
wire   [0:0] tmp_5_4_i_fu_1698_p2;
wire   [7:0] window_val_4_1_fu_1717_p0;
wire  signed [7:0] window_val_4_1_fu_1717_p1;
wire   [7:0] tmp_49_fu_1723_p1;
wire   [0:0] tmp_5_4_1_i_fu_1727_p2;
wire   [7:0] window_val_4_2_fu_1746_p0;
wire  signed [7:0] window_val_4_2_fu_1746_p1;
wire   [7:0] tmp_50_fu_1752_p1;
wire   [0:0] tmp_5_4_2_i_fu_1756_p2;
wire   [7:0] window_val_4_3_fu_1775_p0;
wire  signed [7:0] window_val_4_3_fu_1775_p1;
wire   [15:0] window_val_4_3_fu_1775_p2;
wire   [7:0] tmp_51_fu_1786_p1;
wire   [0:0] tmp_5_4_3_i_fu_1790_p2;
wire   [15:0] tmp2_fu_1802_p2;
wire   [15:0] tmp5_fu_1806_p2;
wire   [15:0] tmp11_fu_1811_p2;
wire   [0:0] tmp_5_4_4_i_fu_1839_p2;
wire   [7:0] valInWindow_0_minVal_22_fu_1843_p3;
wire   [7:0] sel_tmp15_cast_fu_1849_p3;
wire  signed [16:0] tmp_20_tr_fu_1863_p1;
wire   [16:0] p_neg_fu_1866_p2;
wire   [13:0] tmp_4_fu_1872_p4;
wire   [14:0] tmp_5_cast_fu_1882_p1;
wire  signed [13:0] tmp_8_fu_1886_p1;
wire   [14:0] tmp_9_fu_1889_p2;
wire   [14:0] tmp_10_cast_fu_1895_p1;
wire   [14:0] valOutput_1_fu_1899_p3;
wire   [0:0] tmp_27_fu_1910_p3;
wire   [7:0] tmp_26_fu_1906_p1;
wire   [7:0] p_s_fu_1918_p3;
wire    ap_CS_fsm_state33;
reg    ap_block_state33;
reg   [26:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_pp0_stage22_subdone;
wire    ap_block_pp0_stage23_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] window_val_0_0_fu_969_p00;
wire   [15:0] window_val_0_1_fu_1026_p00;
wire   [15:0] window_val_0_2_fu_1056_p00;
wire   [15:0] window_val_0_3_fu_1095_p00;
wire   [15:0] window_val_0_4_fu_1125_p00;
wire   [15:0] window_val_1_0_fu_1154_p00;
wire   [15:0] window_val_1_1_fu_1193_p00;
wire   [15:0] window_val_1_2_fu_1222_p00;
wire   [15:0] window_val_1_3_fu_1251_p00;
wire   [15:0] window_val_1_4_fu_1285_p00;
wire   [15:0] window_val_2_0_fu_1314_p00;
wire   [15:0] window_val_2_1_fu_1343_p00;
wire   [15:0] window_val_2_2_fu_1372_p00;
wire   [15:0] window_val_2_3_fu_1401_p00;
wire   [15:0] window_val_2_4_fu_1430_p00;
wire   [15:0] window_val_3_0_fu_1464_p00;
wire   [15:0] window_val_3_1_fu_1493_p00;
wire   [15:0] window_val_3_2_fu_1522_p00;
wire   [15:0] window_val_3_3_fu_1561_p00;
wire   [15:0] window_val_3_4_fu_1621_p00;
wire   [15:0] window_val_4_0_fu_1669_p00;
wire   [15:0] window_val_4_1_fu_1717_p00;
wire   [15:0] window_val_4_2_fu_1746_p00;
wire   [15:0] window_val_4_3_fu_1775_p00;
wire   [15:0] window_val_4_4_fu_1599_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
#0 inStream_V_data_V_0_sel_rd = 1'b0;
#0 inStream_V_data_V_0_sel_wr = 1'b0;
#0 inStream_V_data_V_0_state = 2'd0;
#0 inStream_V_keep_V_0_sel_rd = 1'b0;
#0 inStream_V_keep_V_0_sel_wr = 1'b0;
#0 inStream_V_keep_V_0_state = 2'd0;
#0 inStream_V_strb_V_0_sel_rd = 1'b0;
#0 inStream_V_strb_V_0_sel_wr = 1'b0;
#0 inStream_V_strb_V_0_state = 2'd0;
#0 inStream_V_user_V_0_sel_rd = 1'b0;
#0 inStream_V_user_V_0_sel_wr = 1'b0;
#0 inStream_V_user_V_0_state = 2'd0;
#0 inStream_V_last_V_0_sel_rd = 1'b0;
#0 inStream_V_last_V_0_sel_wr = 1'b0;
#0 inStream_V_last_V_0_state = 2'd0;
#0 inStream_V_dest_V_0_sel_rd = 1'b0;
#0 inStream_V_dest_V_0_sel_wr = 1'b0;
#0 inStream_V_dest_V_0_state = 2'd0;
#0 outStream_V_data_V_1_sel_rd = 1'b0;
#0 outStream_V_data_V_1_sel_wr = 1'b0;
#0 outStream_V_data_V_1_state = 2'd0;
#0 outStream_V_keep_V_1_sel_rd = 1'b0;
#0 outStream_V_keep_V_1_sel_wr = 1'b0;
#0 outStream_V_keep_V_1_state = 2'd0;
#0 outStream_V_strb_V_1_sel_rd = 1'b0;
#0 outStream_V_strb_V_1_sel_wr = 1'b0;
#0 outStream_V_strb_V_1_state = 2'd0;
#0 outStream_V_user_V_1_sel_rd = 1'b0;
#0 outStream_V_user_V_1_sel_wr = 1'b0;
#0 outStream_V_user_V_1_state = 2'd0;
#0 outStream_V_last_V_1_sel_rd = 1'b0;
#0 outStream_V_last_V_1_sel_wr = 1'b0;
#0 outStream_V_last_V_1_state = 2'd0;
#0 outStream_V_id_V_1_sel_rd = 1'b0;
#0 outStream_V_id_V_1_state = 2'd0;
#0 outStream_V_dest_V_1_sel_rd = 1'b0;
#0 outStream_V_dest_V_1_sel_wr = 1'b0;
#0 outStream_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

doImgProc_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
doImgProc_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .operation(operation)
);

doImgProc_KERNEL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_KERNEL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_KERNEL_BUS_DATA_WIDTH ))
doImgProc_KERNEL_BUS_s_axi_U(
    .AWVALID(s_axi_KERNEL_BUS_AWVALID),
    .AWREADY(s_axi_KERNEL_BUS_AWREADY),
    .AWADDR(s_axi_KERNEL_BUS_AWADDR),
    .WVALID(s_axi_KERNEL_BUS_WVALID),
    .WREADY(s_axi_KERNEL_BUS_WREADY),
    .WDATA(s_axi_KERNEL_BUS_WDATA),
    .WSTRB(s_axi_KERNEL_BUS_WSTRB),
    .ARVALID(s_axi_KERNEL_BUS_ARVALID),
    .ARREADY(s_axi_KERNEL_BUS_ARREADY),
    .ARADDR(s_axi_KERNEL_BUS_ARADDR),
    .RVALID(s_axi_KERNEL_BUS_RVALID),
    .RREADY(s_axi_KERNEL_BUS_RREADY),
    .RDATA(s_axi_KERNEL_BUS_RDATA),
    .RRESP(s_axi_KERNEL_BUS_RRESP),
    .BVALID(s_axi_KERNEL_BUS_BVALID),
    .BREADY(s_axi_KERNEL_BUS_BREADY),
    .BRESP(s_axi_KERNEL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .kernel_address0(kernel_address0),
    .kernel_ce0(kernel_ce0),
    .kernel_q0(kernel_q0)
);

doImgProc_lineBufbkb #(
    .DataWidth( 8 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
lineBuff_val_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuff_val_0_address0),
    .ce0(lineBuff_val_0_ce0),
    .we0(lineBuff_val_0_we0),
    .d0(lineBuff_val_1_q0),
    .q0(lineBuff_val_0_q0),
    .address1(lineBuff_val_0_address1),
    .ce1(lineBuff_val_0_ce1),
    .q1(lineBuff_val_0_q1)
);

doImgProc_lineBufbkb #(
    .DataWidth( 8 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
lineBuff_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuff_val_1_address0),
    .ce0(lineBuff_val_1_ce0),
    .we0(lineBuff_val_1_we0),
    .d0(lineBuff_val_2_q0),
    .q0(lineBuff_val_1_q0),
    .address1(lineBuff_val_1_address1),
    .ce1(lineBuff_val_1_ce1),
    .q1(lineBuff_val_1_q1)
);

doImgProc_lineBufbkb #(
    .DataWidth( 8 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
lineBuff_val_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuff_val_2_address0),
    .ce0(lineBuff_val_2_ce0),
    .we0(lineBuff_val_2_we0),
    .d0(lineBuff_val_3_q0),
    .q0(lineBuff_val_2_q0),
    .address1(lineBuff_val_2_address1),
    .ce1(lineBuff_val_2_ce1),
    .q1(lineBuff_val_2_q1)
);

doImgProc_lineBufbkb #(
    .DataWidth( 8 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
lineBuff_val_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuff_val_3_address0),
    .ce0(lineBuff_val_3_ce0),
    .we0(lineBuff_val_3_we0),
    .d0(lineBuff_val_4_q0),
    .q0(lineBuff_val_3_q0),
    .address1(lineBuff_val_3_address1),
    .ce1(lineBuff_val_3_ce1),
    .q1(lineBuff_val_3_q1)
);

doImgProc_lineBufbkb #(
    .DataWidth( 8 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
lineBuff_val_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuff_val_4_address0),
    .ce0(lineBuff_val_4_ce0),
    .we0(lineBuff_val_4_we0),
    .d0(inStream_V_data_V_0_data_out),
    .q0(lineBuff_val_4_q0),
    .address1(lineBuff_val_4_address1),
    .ce1(lineBuff_val_4_ce1),
    .q1(lineBuff_val_4_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_subdone))))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_data_V_0_ack_out == 1'b1) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
            inStream_V_data_V_0_sel_rd <= ~inStream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_data_V_0_ack_in == 1'b1) & (inStream_V_data_V_0_vld_in == 1'b1))) begin
            inStream_V_data_V_0_sel_wr <= ~inStream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_data_V_0_state == 2'd2) & (inStream_V_data_V_0_vld_in == 1'b0)) | ((inStream_V_data_V_0_state == 2'd3) & (inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_ack_out == 1'b1)))) begin
            inStream_V_data_V_0_state <= 2'd2;
        end else if ((((inStream_V_data_V_0_state == 2'd1) & (inStream_V_data_V_0_ack_out == 1'b0)) | ((inStream_V_data_V_0_state == 2'd3) & (inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_vld_in == 1'b1)))) begin
            inStream_V_data_V_0_state <= 2'd1;
        end else if (((~((inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_ack_out == 1'b1)) & ~((inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_vld_in == 1'b1)) & (inStream_V_data_V_0_state == 2'd3)) | ((inStream_V_data_V_0_state == 2'd1) & (inStream_V_data_V_0_ack_out == 1'b1)) | ((inStream_V_data_V_0_state == 2'd2) & (inStream_V_data_V_0_vld_in == 1'b1)))) begin
            inStream_V_data_V_0_state <= 2'd3;
        end else begin
            inStream_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_vld_out == 1'b1))) begin
            inStream_V_dest_V_0_sel_rd <= ~inStream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_in == 1'b1) & (inStream_V_dest_V_0_vld_in == 1'b1))) begin
            inStream_V_dest_V_0_sel_wr <= ~inStream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd2;
        end else if ((((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd1;
        end else if (((~((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)) & ~((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)) & (inStream_V_dest_V_0_state == 2'd3)) | ((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b1)) | ((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd3;
        end else begin
            inStream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_vld_out == 1'b1))) begin
            inStream_V_keep_V_0_sel_rd <= ~inStream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_in == 1'b1) & (inStream_V_keep_V_0_vld_in == 1'b1))) begin
            inStream_V_keep_V_0_sel_wr <= ~inStream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd2;
        end else if ((((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd1;
        end else if (((~((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)) & ~((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)) & (inStream_V_keep_V_0_state == 2'd3)) | ((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b1)) | ((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd3;
        end else begin
            inStream_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_last_V_0_ack_out == 1'b1) & (inStream_V_last_V_0_vld_out == 1'b1))) begin
            inStream_V_last_V_0_sel_rd <= ~inStream_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_last_V_0_ack_in == 1'b1) & (inStream_V_last_V_0_vld_in == 1'b1))) begin
            inStream_V_last_V_0_sel_wr <= ~inStream_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_last_V_0_state == 2'd2) & (inStream_V_last_V_0_vld_in == 1'b0)) | ((inStream_V_last_V_0_state == 2'd3) & (inStream_V_last_V_0_vld_in == 1'b0) & (inStream_V_last_V_0_ack_out == 1'b1)))) begin
            inStream_V_last_V_0_state <= 2'd2;
        end else if ((((inStream_V_last_V_0_state == 2'd1) & (inStream_V_last_V_0_ack_out == 1'b0)) | ((inStream_V_last_V_0_state == 2'd3) & (inStream_V_last_V_0_ack_out == 1'b0) & (inStream_V_last_V_0_vld_in == 1'b1)))) begin
            inStream_V_last_V_0_state <= 2'd1;
        end else if (((~((inStream_V_last_V_0_vld_in == 1'b0) & (inStream_V_last_V_0_ack_out == 1'b1)) & ~((inStream_V_last_V_0_ack_out == 1'b0) & (inStream_V_last_V_0_vld_in == 1'b1)) & (inStream_V_last_V_0_state == 2'd3)) | ((inStream_V_last_V_0_state == 2'd1) & (inStream_V_last_V_0_ack_out == 1'b1)) | ((inStream_V_last_V_0_state == 2'd2) & (inStream_V_last_V_0_vld_in == 1'b1)))) begin
            inStream_V_last_V_0_state <= 2'd3;
        end else begin
            inStream_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_vld_out == 1'b1))) begin
            inStream_V_strb_V_0_sel_rd <= ~inStream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_in == 1'b1) & (inStream_V_strb_V_0_vld_in == 1'b1))) begin
            inStream_V_strb_V_0_sel_wr <= ~inStream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd2;
        end else if ((((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd1;
        end else if (((~((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)) & ~((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)) & (inStream_V_strb_V_0_state == 2'd3)) | ((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b1)) | ((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd3;
        end else begin
            inStream_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_vld_out == 1'b1))) begin
            inStream_V_user_V_0_sel_rd <= ~inStream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_in == 1'b1) & (inStream_V_user_V_0_vld_in == 1'b1))) begin
            inStream_V_user_V_0_sel_wr <= ~inStream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd2;
        end else if ((((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd1;
        end else if (((~((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)) & ~((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)) & (inStream_V_user_V_0_state == 2'd3)) | ((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b1)) | ((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd3;
        end else begin
            inStream_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_data_V_1_ack_out == 1'b1) & (outStream_V_data_V_1_vld_out == 1'b1))) begin
            outStream_V_data_V_1_sel_rd <= ~outStream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_data_V_1_ack_in == 1'b1) & (outStream_V_data_V_1_vld_in == 1'b1))) begin
            outStream_V_data_V_1_sel_wr <= ~outStream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_data_V_1_state == 2'd2) & (outStream_V_data_V_1_vld_in == 1'b0)) | ((outStream_V_data_V_1_state == 2'd3) & (outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_ack_out == 1'b1)))) begin
            outStream_V_data_V_1_state <= 2'd2;
        end else if ((((outStream_V_data_V_1_state == 2'd1) & (outStream_V_data_V_1_ack_out == 1'b0)) | ((outStream_V_data_V_1_state == 2'd3) & (outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_vld_in == 1'b1)))) begin
            outStream_V_data_V_1_state <= 2'd1;
        end else if (((~((outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_ack_out == 1'b1)) & ~((outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_vld_in == 1'b1)) & (outStream_V_data_V_1_state == 2'd3)) | ((outStream_V_data_V_1_state == 2'd1) & (outStream_V_data_V_1_ack_out == 1'b1)) | ((outStream_V_data_V_1_state == 2'd2) & (outStream_V_data_V_1_vld_in == 1'b1)))) begin
            outStream_V_data_V_1_state <= 2'd3;
        end else begin
            outStream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_vld_out == 1'b1))) begin
            outStream_V_dest_V_1_sel_rd <= ~outStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_in == 1'b1) & (outStream_V_dest_V_1_vld_in == 1'b1))) begin
            outStream_V_dest_V_1_sel_wr <= ~outStream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd2;
        end else if ((((outStream_V_dest_V_1_state == 2'd1) & (outStream_V_dest_V_1_ack_out == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd1;
        end else if (((~((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)) & ~((outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)) & (outStream_V_dest_V_1_state == 2'd3)) | ((outStream_V_dest_V_1_state == 2'd1) & (outStream_V_dest_V_1_ack_out == 1'b1)) | ((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd3;
        end else begin
            outStream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_vld_out == 1'b1))) begin
            outStream_V_id_V_1_sel_rd <= ~outStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd2;
        end else if ((((outStream_V_id_V_1_state == 2'd1) & (outStream_V_id_V_1_ack_out == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd1;
        end else if (((~((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)) & ~((outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)) & (outStream_V_id_V_1_state == 2'd3)) | ((outStream_V_id_V_1_state == 2'd1) & (outStream_V_id_V_1_ack_out == 1'b1)) | ((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd3;
        end else begin
            outStream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_vld_out == 1'b1))) begin
            outStream_V_keep_V_1_sel_rd <= ~outStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_in == 1'b1) & (outStream_V_keep_V_1_vld_in == 1'b1))) begin
            outStream_V_keep_V_1_sel_wr <= ~outStream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd2;
        end else if ((((outStream_V_keep_V_1_state == 2'd1) & (outStream_V_keep_V_1_ack_out == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd1;
        end else if (((~((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)) & ~((outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)) & (outStream_V_keep_V_1_state == 2'd3)) | ((outStream_V_keep_V_1_state == 2'd1) & (outStream_V_keep_V_1_ack_out == 1'b1)) | ((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd3;
        end else begin
            outStream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_vld_out == 1'b1))) begin
            outStream_V_last_V_1_sel_rd <= ~outStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_in == 1'b1) & (outStream_V_last_V_1_vld_in == 1'b1))) begin
            outStream_V_last_V_1_sel_wr <= ~outStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd2;
        end else if ((((outStream_V_last_V_1_state == 2'd1) & (outStream_V_last_V_1_ack_out == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd1;
        end else if (((~((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)) & ~((outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)) & (outStream_V_last_V_1_state == 2'd3)) | ((outStream_V_last_V_1_state == 2'd1) & (outStream_V_last_V_1_ack_out == 1'b1)) | ((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd3;
        end else begin
            outStream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_vld_out == 1'b1))) begin
            outStream_V_strb_V_1_sel_rd <= ~outStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_in == 1'b1) & (outStream_V_strb_V_1_vld_in == 1'b1))) begin
            outStream_V_strb_V_1_sel_wr <= ~outStream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd2;
        end else if ((((outStream_V_strb_V_1_state == 2'd1) & (outStream_V_strb_V_1_ack_out == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd1;
        end else if (((~((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)) & ~((outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)) & (outStream_V_strb_V_1_state == 2'd3)) | ((outStream_V_strb_V_1_state == 2'd1) & (outStream_V_strb_V_1_ack_out == 1'b1)) | ((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd3;
        end else begin
            outStream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_vld_out == 1'b1))) begin
            outStream_V_user_V_1_sel_rd <= ~outStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_in == 1'b1) & (outStream_V_user_V_1_vld_in == 1'b1))) begin
            outStream_V_user_V_1_sel_wr <= ~outStream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd2;
        end else if ((((outStream_V_user_V_1_state == 2'd1) & (outStream_V_user_V_1_ack_out == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd1;
        end else if (((~((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)) & ~((outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)) & (outStream_V_user_V_1_state == 2'd3)) | ((outStream_V_user_V_1_state == 2'd1) & (outStream_V_user_V_1_ack_out == 1'b1)) | ((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd3;
        end else begin
            outStream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_assign_reg_710 <= idxCol_1_reg_2221;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        col_assign_reg_710 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxPixel_reg_733 <= idxPixel_1_reg_2077;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        idxPixel_reg_733 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxRow_reg_699 <= idxRow_1_reg_2126;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        idxRow_reg_699 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        pixProcessed_reg_721 <= pixProcessed_2_reg_2226;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        pixProcessed_reg_721 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond1_reg_2073 <= exitcond1_fu_774_p2;
        exitcond1_reg_2073_pp0_iter1_reg <= exitcond1_reg_2073;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        idxCol_1_reg_2221 <= idxCol_1_fu_948_p3;
        pixProcessed_2_reg_2226 <= pixProcessed_2_fu_954_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_774_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxCol_reg_2121 <= idxCol_fu_838_p2;
        lineBuff_val_1_addr_reg_2087 <= tmp_s_fu_786_p1;
        lineBuff_val_2_addr_reg_2092 <= tmp_s_fu_786_p1;
        lineBuff_val_3_addr_reg_2097 <= tmp_s_fu_786_p1;
        lineBuff_val_4_addr_reg_2102 <= tmp_s_fu_786_p1;
        or_cond_reg_2107 <= or_cond_fu_826_p2;
        tmp_6_reg_2115 <= tmp_6_fu_832_p2;
        tmp_s_reg_2082[31 : 0] <= tmp_s_fu_786_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxPixel_1_reg_2077 <= idxPixel_1_fu_780_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_774_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxRow_1_reg_2126 <= idxRow_1_fu_850_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_V_0_load_A == 1'b1)) begin
        inStream_V_data_V_0_payload_A <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_V_0_load_B == 1'b1)) begin
        inStream_V_data_V_0_payload_B <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_A == 1'b1)) begin
        inStream_V_dest_V_0_payload_A <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_B == 1'b1)) begin
        inStream_V_dest_V_0_payload_B <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_A == 1'b1)) begin
        inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_B == 1'b1)) begin
        inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_last_V_0_load_A == 1'b1)) begin
        inStream_V_last_V_0_payload_A <= inStream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_last_V_0_load_B == 1'b1)) begin
        inStream_V_last_V_0_payload_B <= inStream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_A == 1'b1)) begin
        inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_B == 1'b1)) begin
        inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_A == 1'b1)) begin
        inStream_V_user_V_0_payload_A <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_B == 1'b1)) begin
        inStream_V_user_V_0_payload_B <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        lineBuff_val_0_load_3_reg_2345 <= lineBuff_val_0_q0;
        lineBuff_val_1_load_3_reg_2355 <= lineBuff_val_1_q1;
        lineBuff_val_1_load_4_reg_2360 <= lineBuff_val_1_q0;
        lineBuff_val_2_load_3_reg_2370 <= lineBuff_val_2_q1;
        lineBuff_val_2_load_4_reg_2375 <= lineBuff_val_2_q0;
        lineBuff_val_3_load_3_reg_2385 <= lineBuff_val_3_q1;
        lineBuff_val_3_load_4_reg_2390 <= lineBuff_val_3_q0;
        lineBuff_val_4_load_1_reg_2400 <= lineBuff_val_4_q0;
        lineBuff_val_4_load_5_reg_2415 <= lineBuff_val_4_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        lineBuff_val_1_load_1_reg_2264 <= lineBuff_val_1_q0;
        lineBuff_val_1_load_2_reg_2269 <= lineBuff_val_1_q1;
        lineBuff_val_2_load_1_reg_2284 <= lineBuff_val_2_q0;
        lineBuff_val_2_load_2_reg_2289 <= lineBuff_val_2_q1;
        lineBuff_val_3_load_1_reg_2304 <= lineBuff_val_3_q0;
        lineBuff_val_3_load_2_reg_2309 <= lineBuff_val_3_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        lineBuff_val_1_load_5_reg_2426 <= lineBuff_val_1_q1;
        lineBuff_val_2_load_5_reg_2431 <= lineBuff_val_2_q1;
        lineBuff_val_3_load_5_reg_2436 <= lineBuff_val_3_q1;
        lineBuff_val_4_load_2_reg_2441 <= lineBuff_val_4_q1;
        lineBuff_val_4_load_4_reg_2451 <= lineBuff_val_4_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        lineBuff_val_4_load_3_reg_2472 <= lineBuff_val_4_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_V_1_load_A == 1'b1)) begin
        outStream_V_data_V_1_payload_A <= dataOutSideChannel_d_fu_1926_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_V_1_load_B == 1'b1)) begin
        outStream_V_data_V_1_payload_B <= dataOutSideChannel_d_fu_1926_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_A == 1'b1)) begin
        outStream_V_dest_V_1_payload_A <= tmp_dest_V_reg_2151_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_B == 1'b1)) begin
        outStream_V_dest_V_1_payload_B <= tmp_dest_V_reg_2151_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_A == 1'b1)) begin
        outStream_V_keep_V_1_payload_A <= tmp_keep_V_reg_2131_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_B == 1'b1)) begin
        outStream_V_keep_V_1_payload_B <= tmp_keep_V_reg_2131_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_A == 1'b1)) begin
        outStream_V_last_V_1_payload_A <= tmp_last_V_reg_2146_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_B == 1'b1)) begin
        outStream_V_last_V_1_payload_B <= tmp_last_V_reg_2146_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_A == 1'b1)) begin
        outStream_V_strb_V_1_payload_A <= tmp_strb_V_reg_2136_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_B == 1'b1)) begin
        outStream_V_strb_V_1_payload_B <= tmp_strb_V_reg_2136_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_A == 1'b1)) begin
        outStream_V_user_V_1_payload_A <= tmp_user_V_reg_2141_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_B == 1'b1)) begin
        outStream_V_user_V_1_payload_B <= tmp_user_V_reg_2141_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage21) & (1'b0 == ap_block_pp0_stage21_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_744 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        reg_748 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_752 <= lineBuff_val_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sel_tmp2_reg_2058 <= sel_tmp2_fu_756_p2;
        sel_tmp5_reg_2063 <= sel_tmp5_fu_762_p2;
        sel_tmp8_reg_2068 <= sel_tmp8_fu_768_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        sel_tmp3_reg_2206 <= sel_tmp3_fu_912_p2;
        sel_tmp6_reg_2211 <= sel_tmp6_fu_924_p2;
        sel_tmp9_reg_2216 <= sel_tmp9_fu_936_p2;
        tmp_27_0_1_reg_2166[31 : 0] <= tmp_27_0_1_fu_897_p1[31 : 0];
        tmp_5_reg_2156[31 : 0] <= tmp_5_fu_883_p1[31 : 0];
        tmp_dest_V_reg_2151 <= inStream_V_dest_V_0_data_out;
        tmp_keep_V_reg_2131 <= inStream_V_keep_V_0_data_out;
        tmp_last_V_reg_2146 <= inStream_V_last_V_0_data_out;
        tmp_strb_V_reg_2136 <= inStream_V_strb_V_0_data_out;
        tmp_user_V_reg_2141 <= inStream_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        sel_tmp3_reg_2206_pp0_iter1_reg <= sel_tmp3_reg_2206;
        sel_tmp6_reg_2211_pp0_iter1_reg <= sel_tmp6_reg_2211;
        sel_tmp9_reg_2216_pp0_iter1_reg <= sel_tmp9_reg_2216;
        tmp_dest_V_reg_2151_pp0_iter1_reg <= tmp_dest_V_reg_2151;
        tmp_keep_V_reg_2131_pp0_iter1_reg <= tmp_keep_V_reg_2131;
        tmp_last_V_reg_2146_pp0_iter1_reg <= tmp_last_V_reg_2146;
        tmp_strb_V_reg_2136_pp0_iter1_reg <= tmp_strb_V_reg_2136;
        tmp_user_V_reg_2141_pp0_iter1_reg <= tmp_user_V_reg_2141;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (sel_tmp9_reg_2216_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        sel_tmp_reg_2744 <= sel_tmp_fu_1856_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp9_reg_2216 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage21) & (1'b0 == ap_block_pp0_stage21_11001))) begin
        tmp10_reg_2642 <= tmp10_fu_1571_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp9_reg_2216 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        tmp13_reg_2456 <= tmp13_fu_1067_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp9_reg_2216 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        tmp15_reg_2494 <= tmp15_fu_1165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp9_reg_2216 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001))) begin
        tmp17_reg_2527 <= tmp17_fu_1257_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp9_reg_2216 == 1'd1) & (exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp1_reg_2718 <= tmp1_fu_1781_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp9_reg_2216 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22_11001))) begin
        tmp20_reg_2653 <= tmp20_fu_1605_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp9_reg_2216 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_11001))) begin
        tmp22_reg_2669 <= tmp22_fu_1640_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp9_reg_2216 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_11001))) begin
        tmp23_reg_2685 <= tmp23_fu_1689_p2;
        tmp4_reg_2680 <= tmp4_fu_1680_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp9_reg_2216 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001))) begin
        tmp6_reg_2593 <= tmp6_fu_1436_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp9_reg_2216 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20_11001))) begin
        tmp9_reg_2626 <= tmp9_fu_1533_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp9_reg_2216_pp0_iter1_reg == 1'd1) & (exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_25_reg_2734 <= valOutput_fu_1816_p2[32'd15];
        tmp_7_reg_2739 <= {{valOutput_fu_1816_p2[15:3]}};
        valOutput_reg_2729 <= valOutput_fu_1816_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_27_0_2_reg_2236[31 : 0] <= tmp_27_0_2_fu_981_p1[31 : 0];
        tmp_27_0_3_reg_2246[31 : 0] <= tmp_27_0_3_fu_995_p1[31 : 0];
        tmp_27_0_4_reg_2256[31 : 0] <= tmp_27_0_4_fu_1009_p1[31 : 0];
        window_val_0_0_reg_2231 <= window_val_0_0_fu_969_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_28_reg_2334 <= tmp_28_fu_1014_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22_11001))) begin
        tmp_52_reg_2658 <= tmp_52_fu_1610_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001))) begin
        valInWindow_0_minVal_10_reg_2576 <= valInWindow_0_minVal_10_fu_1387_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001))) begin
        valInWindow_0_minVal_11_reg_2587 <= valInWindow_0_minVal_11_fu_1416_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001))) begin
        valInWindow_0_minVal_12_reg_2598 <= valInWindow_0_minVal_12_fu_1450_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001))) begin
        valInWindow_0_minVal_13_reg_2609 <= valInWindow_0_minVal_13_fu_1479_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19_11001))) begin
        valInWindow_0_minVal_14_reg_2620 <= valInWindow_0_minVal_14_fu_1508_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20_11001))) begin
        valInWindow_0_minVal_15_reg_2631 <= valInWindow_0_minVal_15_fu_1547_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage21) & (1'b0 == ap_block_pp0_stage21_11001))) begin
        valInWindow_0_minVal_16_reg_2647 <= valInWindow_0_minVal_16_fu_1585_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_11001))) begin
        valInWindow_0_minVal_17_reg_2674 <= valInWindow_0_minVal_17_fu_1655_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_11001))) begin
        valInWindow_0_minVal_18_reg_2690 <= valInWindow_0_minVal_18_fu_1703_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        valInWindow_0_minVal_19_reg_2701 <= valInWindow_0_minVal_19_fu_1732_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        valInWindow_0_minVal_1_reg_2461 <= valInWindow_0_minVal_1_fu_1081_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        valInWindow_0_minVal_20_reg_2712 <= valInWindow_0_minVal_20_fu_1761_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        valInWindow_0_minVal_21_reg_2723 <= valInWindow_0_minVal_21_fu_1795_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001))) begin
        valInWindow_0_minVal_23_reg_2565 <= valInWindow_0_minVal_23_fu_1358_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        valInWindow_0_minVal_2_reg_2477 <= valInWindow_0_minVal_2_fu_1110_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        valInWindow_0_minVal_3_reg_2488 <= valInWindow_0_minVal_3_fu_1140_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        valInWindow_0_minVal_4_reg_2499 <= valInWindow_0_minVal_4_fu_1179_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001))) begin
        valInWindow_0_minVal_5_reg_2510 <= valInWindow_0_minVal_5_fu_1208_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001))) begin
        valInWindow_0_minVal_6_reg_2521 <= valInWindow_0_minVal_6_fu_1237_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001))) begin
        valInWindow_0_minVal_7_reg_2532 <= valInWindow_0_minVal_7_fu_1271_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001))) begin
        valInWindow_0_minVal_8_reg_2543 <= valInWindow_0_minVal_8_fu_1300_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001))) begin
        valInWindow_0_minVal_9_reg_2554 <= valInWindow_0_minVal_9_fu_1329_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp6_reg_2211 == 1'd1) & (exitcond1_reg_2073 == 1'd0) & (sel_tmp9_reg_2216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        valInWindow_0_minVal_reg_2420 <= valInWindow_0_minVal_fu_1041_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        window_val_0_1_reg_2340 <= window_val_0_1_fu_1026_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        window_val_0_3_reg_2467 <= window_val_0_3_fu_1095_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        window_val_0_4_reg_2483 <= window_val_0_4_fu_1125_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001))) begin
        window_val_1_1_reg_2505 <= window_val_1_1_fu_1193_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001))) begin
        window_val_1_2_reg_2516 <= window_val_1_2_fu_1222_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001))) begin
        window_val_1_4_reg_2538 <= window_val_1_4_fu_1285_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001))) begin
        window_val_2_0_reg_2549 <= window_val_2_0_fu_1314_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001))) begin
        window_val_2_1_reg_2560 <= window_val_2_1_fu_1343_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001))) begin
        window_val_2_2_reg_2571 <= window_val_2_2_fu_1372_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001))) begin
        window_val_2_3_reg_2582 <= window_val_2_3_fu_1401_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001))) begin
        window_val_3_0_reg_2604 <= window_val_3_0_fu_1464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19_11001))) begin
        window_val_3_1_reg_2615 <= window_val_3_1_fu_1493_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage21) & (1'b0 == ap_block_pp0_stage21_11001))) begin
        window_val_3_3_reg_2637 <= window_val_3_3_fu_1561_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_11001))) begin
        window_val_3_4_reg_2664 <= window_val_3_4_fu_1621_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        window_val_4_1_reg_2696 <= window_val_4_1_fu_1717_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        window_val_4_2_reg_2707 <= window_val_4_2_fu_1746_p2;
    end
end

always @ (*) begin
    if ((exitcond1_fu_774_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_col_assign_phi_fu_714_p4 = idxCol_1_reg_2221;
    end else begin
        ap_phi_mux_col_assign_phi_fu_714_p4 = col_assign_reg_710;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_idxPixel_phi_fu_737_p4 = idxPixel_1_reg_2077;
    end else begin
        ap_phi_mux_idxPixel_phi_fu_737_p4 = idxPixel_reg_733;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_idxRow_phi_fu_703_p4 = idxRow_1_reg_2126;
    end else begin
        ap_phi_mux_idxRow_phi_fu_703_p4 = idxRow_reg_699;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_phi_mux_pixProcessed_phi_fu_725_p4 = pixProcessed_2_reg_2226;
    end else begin
        ap_phi_mux_pixProcessed_phi_fu_725_p4 = pixProcessed_reg_721;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        inStream_TDATA_blk_n = inStream_V_data_V_0_state[1'd0];
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        inStream_V_data_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_data_V_0_sel == 1'b1)) begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_B;
    end else begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        inStream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_dest_V_0_sel == 1'b1)) begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B;
    end else begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        inStream_V_keep_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_keep_V_0_sel == 1'b1)) begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B;
    end else begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        inStream_V_last_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_last_V_0_sel == 1'b1)) begin
        inStream_V_last_V_0_data_out = inStream_V_last_V_0_payload_B;
    end else begin
        inStream_V_last_V_0_data_out = inStream_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        inStream_V_strb_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_strb_V_0_sel == 1'b1)) begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B;
    end else begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        inStream_V_user_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_user_V_0_sel == 1'b1)) begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B;
    end else begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24))) begin
            kernel_address0 = 64'd23;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23))) begin
            kernel_address0 = 64'd22;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22))) begin
            kernel_address0 = 64'd21;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage21) & (1'b0 == ap_block_pp0_stage21))) begin
            kernel_address0 = 64'd24;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20))) begin
            kernel_address0 = 64'd20;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19))) begin
            kernel_address0 = 64'd19;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18))) begin
            kernel_address0 = 64'd18;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17))) begin
            kernel_address0 = 64'd17;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16))) begin
            kernel_address0 = 64'd16;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15))) begin
            kernel_address0 = 64'd15;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14))) begin
            kernel_address0 = 64'd14;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13))) begin
            kernel_address0 = 64'd13;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12))) begin
            kernel_address0 = 64'd12;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11))) begin
            kernel_address0 = 64'd11;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10))) begin
            kernel_address0 = 64'd10;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
            kernel_address0 = 64'd9;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
            kernel_address0 = 64'd8;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
            kernel_address0 = 64'd7;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
            kernel_address0 = 64'd6;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            kernel_address0 = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            kernel_address0 = 64'd4;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            kernel_address0 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            kernel_address0 = 64'd2;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            kernel_address0 = 64'd1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            kernel_address0 = 64'd0;
        end else begin
            kernel_address0 = 'bx;
        end
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage21) & (1'b0 == ap_block_pp0_stage21_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            lineBuff_val_0_address0 = tmp_27_0_3_fu_995_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_0_address0 = tmp_5_fu_883_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            lineBuff_val_0_address0 = tmp_s_reg_2082;
        end else begin
            lineBuff_val_0_address0 = 'bx;
        end
    end else begin
        lineBuff_val_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            lineBuff_val_0_address1 = tmp_27_0_4_reg_2256;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            lineBuff_val_0_address1 = tmp_27_0_2_fu_981_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_0_address1 = tmp_27_0_1_fu_897_p1;
        end else begin
            lineBuff_val_0_address1 = 'bx;
        end
    end else begin
        lineBuff_val_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuff_val_0_ce0 = 1'b1;
    end else begin
        lineBuff_val_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuff_val_0_ce1 = 1'b1;
    end else begin
        lineBuff_val_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        lineBuff_val_0_we0 = 1'b1;
    end else begin
        lineBuff_val_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            lineBuff_val_1_address0 = tmp_27_0_3_fu_995_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_1_address0 = tmp_5_fu_883_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            lineBuff_val_1_address0 = lineBuff_val_1_addr_reg_2087;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            lineBuff_val_1_address0 = tmp_s_fu_786_p1;
        end else begin
            lineBuff_val_1_address0 = 'bx;
        end
    end else begin
        lineBuff_val_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            lineBuff_val_1_address1 = tmp_27_0_4_reg_2256;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            lineBuff_val_1_address1 = tmp_27_0_2_fu_981_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_1_address1 = tmp_27_0_1_fu_897_p1;
        end else begin
            lineBuff_val_1_address1 = 'bx;
        end
    end else begin
        lineBuff_val_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuff_val_1_ce0 = 1'b1;
    end else begin
        lineBuff_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuff_val_1_ce1 = 1'b1;
    end else begin
        lineBuff_val_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        lineBuff_val_1_we0 = 1'b1;
    end else begin
        lineBuff_val_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            lineBuff_val_2_address0 = tmp_27_0_3_fu_995_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_2_address0 = tmp_5_fu_883_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            lineBuff_val_2_address0 = lineBuff_val_2_addr_reg_2092;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            lineBuff_val_2_address0 = tmp_s_fu_786_p1;
        end else begin
            lineBuff_val_2_address0 = 'bx;
        end
    end else begin
        lineBuff_val_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            lineBuff_val_2_address1 = tmp_27_0_4_reg_2256;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            lineBuff_val_2_address1 = tmp_27_0_2_fu_981_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_2_address1 = tmp_27_0_1_fu_897_p1;
        end else begin
            lineBuff_val_2_address1 = 'bx;
        end
    end else begin
        lineBuff_val_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuff_val_2_ce0 = 1'b1;
    end else begin
        lineBuff_val_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuff_val_2_ce1 = 1'b1;
    end else begin
        lineBuff_val_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        lineBuff_val_2_we0 = 1'b1;
    end else begin
        lineBuff_val_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            lineBuff_val_3_address0 = tmp_27_0_3_fu_995_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_3_address0 = tmp_5_fu_883_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            lineBuff_val_3_address0 = lineBuff_val_3_addr_reg_2097;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            lineBuff_val_3_address0 = tmp_s_fu_786_p1;
        end else begin
            lineBuff_val_3_address0 = 'bx;
        end
    end else begin
        lineBuff_val_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            lineBuff_val_3_address1 = tmp_27_0_4_reg_2256;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            lineBuff_val_3_address1 = tmp_27_0_2_fu_981_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_3_address1 = tmp_27_0_1_fu_897_p1;
        end else begin
            lineBuff_val_3_address1 = 'bx;
        end
    end else begin
        lineBuff_val_3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuff_val_3_ce0 = 1'b1;
    end else begin
        lineBuff_val_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuff_val_3_ce1 = 1'b1;
    end else begin
        lineBuff_val_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond1_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        lineBuff_val_3_we0 = 1'b1;
    end else begin
        lineBuff_val_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            lineBuff_val_4_address0 = tmp_27_0_3_reg_2246;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            lineBuff_val_4_address0 = tmp_5_reg_2156;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_4_address0 = lineBuff_val_4_addr_reg_2102;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            lineBuff_val_4_address0 = tmp_s_fu_786_p1;
        end else begin
            lineBuff_val_4_address0 = 'bx;
        end
    end else begin
        lineBuff_val_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            lineBuff_val_4_address1 = tmp_27_0_2_reg_2236;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            lineBuff_val_4_address1 = tmp_27_0_1_reg_2166;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            lineBuff_val_4_address1 = tmp_27_0_4_fu_1009_p1;
        end else begin
            lineBuff_val_4_address1 = 'bx;
        end
    end else begin
        lineBuff_val_4_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuff_val_4_ce0 = 1'b1;
    end else begin
        lineBuff_val_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        lineBuff_val_4_ce1 = 1'b1;
    end else begin
        lineBuff_val_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2073 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        lineBuff_val_4_we0 = 1'b1;
    end else begin
        lineBuff_val_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5) & (exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        outStream_TDATA_blk_n = outStream_V_data_V_1_state[1'd1];
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((outStream_V_data_V_1_sel == 1'b1)) begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_B;
    end else begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        outStream_V_data_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_dest_V_1_sel == 1'b1)) begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B;
    end else begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        outStream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        outStream_V_id_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_keep_V_1_sel == 1'b1)) begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B;
    end else begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        outStream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_last_V_1_sel == 1'b1)) begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B;
    end else begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        outStream_V_last_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_strb_V_1_sel == 1'b1)) begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B;
    end else begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        outStream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_user_V_1_sel == 1'b1)) begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B;
    end else begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        outStream_V_user_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond1_fu_774_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond1_fu_774_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_subdone)) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((1'b0 == ap_block_pp0_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        ap_ST_fsm_state33 : begin
            if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage20 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage21 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp0_stage22 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage24 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd26];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((exitcond1_reg_2073 == 1'd0) & (inStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((exitcond1_reg_2073 == 1'd0) & (inStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((1'b1 == ap_block_state31_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((1'b1 == ap_block_state31_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((1'b1 == ap_block_state32_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((1'b1 == ap_block_state32_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage24_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state31_io = ((exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (outStream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state31_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_io = ((exitcond1_reg_2073_pp0_iter1_reg == 1'd0) & (outStream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state32_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state33 = ((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage2_iter0 = ((exitcond1_reg_2073 == 1'd0) & (inStream_V_data_V_0_vld_out == 1'b0));
end

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign col_assign_1_0_2_fu_975_p2 = (32'd2 + pixProcessed_reg_721);

assign col_assign_1_0_3_fu_989_p2 = (32'd3 + pixProcessed_reg_721);

assign col_assign_1_0_4_fu_1003_p2 = (32'd4 + pixProcessed_reg_721);

assign dataOutSideChannel_d_fu_1926_p3 = ((sel_tmp9_reg_2216_pp0_iter1_reg[0:0] === 1'b1) ? p_s_fu_1918_p3 : sel_tmp_reg_2744);

assign exitcond1_fu_774_p2 = ((ap_phi_mux_idxPixel_phi_fu_737_p4 == 17'd76800) ? 1'b1 : 1'b0);

assign icmp4_fu_820_p2 = (($signed(tmp_2_fu_810_p4) > $signed(30'd0)) ? 1'b1 : 1'b0);

assign icmp_fu_804_p2 = (($signed(tmp_1_fu_794_p4) > $signed(30'd0)) ? 1'b1 : 1'b0);

assign idxCol_1_fu_948_p3 = ((tmp_6_reg_2115[0:0] === 1'b1) ? idxCol_reg_2121 : 32'd0);

assign idxCol_fu_838_p2 = (32'd1 + ap_phi_mux_col_assign_phi_fu_714_p4);

assign idxPixel_1_fu_780_p2 = (ap_phi_mux_idxPixel_phi_fu_737_p4 + 17'd1);

assign idxRow_1_fu_850_p3 = ((tmp_6_fu_832_p2[0:0] === 1'b1) ? ap_phi_mux_idxRow_phi_fu_703_p4 : idxRow_2_fu_844_p2);

assign idxRow_2_fu_844_p2 = (32'd1 + ap_phi_mux_idxRow_phi_fu_703_p4);

assign inStream_TREADY = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_data_V_0_ack_in = inStream_V_data_V_0_state[1'd1];

assign inStream_V_data_V_0_load_A = (inStream_V_data_V_0_state_cmp_full & ~inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_load_B = (inStream_V_data_V_0_state_cmp_full & inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_sel = inStream_V_data_V_0_sel_rd;

assign inStream_V_data_V_0_state_cmp_full = ((inStream_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_data_V_0_vld_in = inStream_TVALID;

assign inStream_V_data_V_0_vld_out = inStream_V_data_V_0_state[1'd0];

assign inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full & ~inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_state_cmp_full & inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd;

assign inStream_V_dest_V_0_state_cmp_full = ((inStream_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_dest_V_0_vld_in = inStream_TVALID;

assign inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state[1'd0];

assign inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state[1'd1];

assign inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full & ~inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_state_cmp_full & inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd;

assign inStream_V_keep_V_0_state_cmp_full = ((inStream_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_keep_V_0_vld_in = inStream_TVALID;

assign inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state[1'd0];

assign inStream_V_last_V_0_ack_in = inStream_V_last_V_0_state[1'd1];

assign inStream_V_last_V_0_load_A = (inStream_V_last_V_0_state_cmp_full & ~inStream_V_last_V_0_sel_wr);

assign inStream_V_last_V_0_load_B = (inStream_V_last_V_0_state_cmp_full & inStream_V_last_V_0_sel_wr);

assign inStream_V_last_V_0_sel = inStream_V_last_V_0_sel_rd;

assign inStream_V_last_V_0_state_cmp_full = ((inStream_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_last_V_0_vld_in = inStream_TVALID;

assign inStream_V_last_V_0_vld_out = inStream_V_last_V_0_state[1'd0];

assign inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state[1'd1];

assign inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full & ~inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_state_cmp_full & inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd;

assign inStream_V_strb_V_0_state_cmp_full = ((inStream_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_strb_V_0_vld_in = inStream_TVALID;

assign inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state[1'd0];

assign inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state[1'd1];

assign inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full & ~inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_load_B = (inStream_V_user_V_0_state_cmp_full & inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd;

assign inStream_V_user_V_0_state_cmp_full = ((inStream_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_user_V_0_vld_in = inStream_TVALID;

assign inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state[1'd0];

assign or_cond_fu_826_p2 = (icmp_fu_804_p2 & icmp4_fu_820_p2);

assign outStream_TDATA = outStream_V_data_V_1_data_out;

assign outStream_TDEST = outStream_V_dest_V_1_data_out;

assign outStream_TID = outStream_V_id_V_1_data_out;

assign outStream_TKEEP = outStream_V_keep_V_1_data_out;

assign outStream_TLAST = outStream_V_last_V_1_data_out;

assign outStream_TSTRB = outStream_V_strb_V_1_data_out;

assign outStream_TUSER = outStream_V_user_V_1_data_out;

assign outStream_TVALID = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_data_V_1_ack_in = outStream_V_data_V_1_state[1'd1];

assign outStream_V_data_V_1_ack_out = outStream_TREADY;

assign outStream_V_data_V_1_load_A = (outStream_V_data_V_1_state_cmp_full & ~outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_load_B = (outStream_V_data_V_1_state_cmp_full & outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_sel = outStream_V_data_V_1_sel_rd;

assign outStream_V_data_V_1_state_cmp_full = ((outStream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_data_V_1_vld_out = outStream_V_data_V_1_state[1'd0];

assign outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state[1'd1];

assign outStream_V_dest_V_1_ack_out = outStream_TREADY;

assign outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full & ~outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_state_cmp_full & outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd;

assign outStream_V_dest_V_1_state_cmp_full = ((outStream_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state[1'd1];

assign outStream_V_id_V_1_ack_out = outStream_TREADY;

assign outStream_V_id_V_1_data_out = 5'd0;

assign outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd;

assign outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state[1'd0];

assign outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state[1'd1];

assign outStream_V_keep_V_1_ack_out = outStream_TREADY;

assign outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full & ~outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_state_cmp_full & outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd;

assign outStream_V_keep_V_1_state_cmp_full = ((outStream_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state[1'd0];

assign outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state[1'd1];

assign outStream_V_last_V_1_ack_out = outStream_TREADY;

assign outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full & ~outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_load_B = (outStream_V_last_V_1_state_cmp_full & outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd;

assign outStream_V_last_V_1_state_cmp_full = ((outStream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state[1'd0];

assign outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state[1'd1];

assign outStream_V_strb_V_1_ack_out = outStream_TREADY;

assign outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full & ~outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_state_cmp_full & outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd;

assign outStream_V_strb_V_1_state_cmp_full = ((outStream_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state[1'd0];

assign outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state[1'd1];

assign outStream_V_user_V_1_ack_out = outStream_TREADY;

assign outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full & ~outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_load_B = (outStream_V_user_V_1_state_cmp_full & outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd;

assign outStream_V_user_V_1_state_cmp_full = ((outStream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state[1'd0];

assign p_neg_fu_1866_p2 = ($signed(17'd0) - $signed(tmp_20_tr_fu_1863_p1));

assign p_s_fu_1918_p3 = ((tmp_27_fu_1910_p3[0:0] === 1'b1) ? 8'd0 : tmp_26_fu_1906_p1);

assign pixProcessed_1_fu_940_p3 = ((sel_tmp9_fu_936_p2[0:0] === 1'b1) ? pixProcessed_3_fu_891_p2 : sel_tmp7_fu_928_p3);

assign pixProcessed_2_fu_954_p3 = ((tmp_6_reg_2115[0:0] === 1'b1) ? pixProcessed_1_fu_940_p3 : 32'd0);

assign pixProcessed_3_fu_891_p2 = (32'd1 + ap_phi_mux_pixProcessed_phi_fu_725_p4);

assign sel_tmp15_cast_fu_1849_p3 = ((sel_tmp3_reg_2206_pp0_iter1_reg[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign sel_tmp1_fu_905_p3 = ((or_cond_reg_2107[0:0] === 1'b1) ? pixProcessed_3_fu_891_p2 : ap_phi_mux_pixProcessed_phi_fu_725_p4);

assign sel_tmp2_fu_756_p2 = ((operation == 32'd2) ? 1'b1 : 1'b0);

assign sel_tmp3_fu_912_p2 = (sel_tmp2_reg_2058 & or_cond_reg_2107);

assign sel_tmp4_fu_916_p3 = ((sel_tmp3_fu_912_p2[0:0] === 1'b1) ? pixProcessed_3_fu_891_p2 : sel_tmp1_fu_905_p3);

assign sel_tmp5_fu_762_p2 = ((operation == 32'd1) ? 1'b1 : 1'b0);

assign sel_tmp6_fu_924_p2 = (sel_tmp5_reg_2063 & or_cond_reg_2107);

assign sel_tmp7_fu_928_p3 = ((sel_tmp6_fu_924_p2[0:0] === 1'b1) ? pixProcessed_3_fu_891_p2 : sel_tmp4_fu_916_p3);

assign sel_tmp8_fu_768_p2 = ((operation == 32'd0) ? 1'b1 : 1'b0);

assign sel_tmp9_fu_936_p2 = (sel_tmp8_reg_2068 & or_cond_reg_2107);

assign sel_tmp_fu_1856_p3 = ((sel_tmp6_reg_2211_pp0_iter1_reg[0:0] === 1'b1) ? valInWindow_0_minVal_22_fu_1843_p3 : sel_tmp15_cast_fu_1849_p3);

assign tmp10_fu_1571_p2 = (tmp9_reg_2626 + tmp7_fu_1567_p2);

assign tmp11_fu_1811_p2 = (tmp10_reg_2642 + tmp5_fu_1806_p2);

assign tmp12_fu_1062_p2 = (window_val_0_2_fu_1056_p2 + window_val_0_1_reg_2340);

assign tmp13_fu_1067_p2 = (tmp12_fu_1062_p2 + window_val_0_0_reg_2231);

assign tmp14_fu_1160_p2 = (window_val_1_0_fu_1154_p2 + window_val_0_4_reg_2483);

assign tmp15_fu_1165_p2 = (tmp14_fu_1160_p2 + window_val_0_3_reg_2467);

assign tmp16_fu_1685_p2 = (tmp15_reg_2494 + tmp13_reg_2456);

assign tmp17_fu_1257_p2 = (window_val_1_3_fu_1251_p2 + window_val_1_2_reg_2516);

assign tmp18_fu_1627_p2 = (tmp17_reg_2527 + window_val_1_1_reg_2505);

assign tmp19_fu_1631_p2 = (window_val_1_4_reg_2538 + window_val_2_1_reg_2560);

assign tmp1_fu_1781_p2 = (window_val_4_3_fu_1775_p2 + window_val_4_1_reg_2696);

assign tmp20_fu_1605_p2 = (window_val_2_0_reg_2549 + window_val_4_4_fu_1599_p2);

assign tmp21_fu_1635_p2 = (tmp20_reg_2653 + tmp19_fu_1631_p2);

assign tmp22_fu_1640_p2 = (tmp21_fu_1635_p2 + tmp18_fu_1627_p2);

assign tmp23_fu_1689_p2 = (tmp22_reg_2669 + tmp16_fu_1685_p2);

assign tmp2_fu_1802_p2 = (tmp1_reg_2718 + window_val_4_2_reg_2707);

assign tmp3_fu_1675_p2 = (window_val_4_0_fu_1669_p2 + window_val_3_4_reg_2664);

assign tmp4_fu_1680_p2 = (tmp3_fu_1675_p2 + window_val_3_3_reg_2637);

assign tmp5_fu_1806_p2 = (tmp4_reg_2680 + tmp2_fu_1802_p2);

assign tmp6_fu_1436_p2 = (window_val_2_4_fu_1430_p2 + window_val_2_3_reg_2582);

assign tmp7_fu_1567_p2 = (tmp6_reg_2593 + window_val_2_2_reg_2571);

assign tmp8_fu_1528_p2 = (window_val_3_2_fu_1522_p2 + window_val_3_1_reg_2615);

assign tmp9_fu_1533_p2 = (tmp8_fu_1528_p2 + window_val_3_0_reg_2604);

assign tmp_10_cast_fu_1895_p1 = $unsigned(tmp_8_fu_1886_p1);

assign tmp_1_fu_794_p4 = {{ap_phi_mux_idxRow_phi_fu_703_p4[31:2]}};

assign tmp_20_tr_fu_1863_p1 = valOutput_reg_2729;

assign tmp_26_fu_1906_p1 = valOutput_1_fu_1899_p3[7:0];

assign tmp_27_0_1_fu_897_p1 = pixProcessed_3_fu_891_p2;

assign tmp_27_0_2_fu_981_p1 = col_assign_1_0_2_fu_975_p2;

assign tmp_27_0_3_fu_995_p1 = col_assign_1_0_3_fu_989_p2;

assign tmp_27_0_4_fu_1009_p1 = col_assign_1_0_4_fu_1003_p2;

assign tmp_27_fu_1910_p3 = valOutput_1_fu_1899_p3[32'd14];

assign tmp_28_fu_1014_p1 = window_val_0_0_fu_969_p2[7:0];

assign tmp_29_fu_1032_p1 = window_val_0_1_fu_1026_p2[7:0];

assign tmp_2_fu_810_p4 = {{ap_phi_mux_col_assign_phi_fu_714_p4[31:2]}};

assign tmp_30_fu_1072_p1 = window_val_0_2_fu_1056_p2[7:0];

assign tmp_31_fu_1101_p1 = window_val_0_3_fu_1095_p2[7:0];

assign tmp_32_fu_1131_p1 = window_val_0_4_fu_1125_p2[7:0];

assign tmp_33_fu_1170_p1 = window_val_1_0_fu_1154_p2[7:0];

assign tmp_34_fu_1199_p1 = window_val_1_1_fu_1193_p2[7:0];

assign tmp_35_fu_1228_p1 = window_val_1_2_fu_1222_p2[7:0];

assign tmp_36_fu_1262_p1 = window_val_1_3_fu_1251_p2[7:0];

assign tmp_37_fu_1291_p1 = window_val_1_4_fu_1285_p2[7:0];

assign tmp_38_fu_1320_p1 = window_val_2_0_fu_1314_p2[7:0];

assign tmp_39_fu_1349_p1 = window_val_2_1_fu_1343_p2[7:0];

assign tmp_40_fu_1378_p1 = window_val_2_2_fu_1372_p2[7:0];

assign tmp_41_fu_1407_p1 = window_val_2_3_fu_1401_p2[7:0];

assign tmp_42_fu_1441_p1 = window_val_2_4_fu_1430_p2[7:0];

assign tmp_43_fu_1470_p1 = window_val_3_0_fu_1464_p2[7:0];

assign tmp_44_fu_1499_p1 = window_val_3_1_fu_1493_p2[7:0];

assign tmp_45_fu_1538_p1 = window_val_3_2_fu_1522_p2[7:0];

assign tmp_46_fu_1576_p1 = window_val_3_3_fu_1561_p2[7:0];

assign tmp_47_fu_1646_p1 = window_val_3_4_fu_1621_p2[7:0];

assign tmp_48_fu_1694_p1 = window_val_4_0_fu_1669_p2[7:0];

assign tmp_49_fu_1723_p1 = window_val_4_1_fu_1717_p2[7:0];

assign tmp_4_fu_1872_p4 = {{p_neg_fu_1866_p2[16:3]}};

assign tmp_50_fu_1752_p1 = window_val_4_2_fu_1746_p2[7:0];

assign tmp_51_fu_1786_p1 = window_val_4_3_fu_1775_p2[7:0];

assign tmp_52_fu_1610_p1 = window_val_4_4_fu_1599_p2[7:0];

assign tmp_5_0_1_i_fu_1036_p2 = ((tmp_29_fu_1032_p1 < tmp_28_reg_2334) ? 1'b1 : 1'b0);

assign tmp_5_0_2_i_fu_1076_p2 = ((tmp_30_fu_1072_p1 < valInWindow_0_minVal_reg_2420) ? 1'b1 : 1'b0);

assign tmp_5_0_3_i_fu_1105_p2 = ((tmp_31_fu_1101_p1 < valInWindow_0_minVal_1_reg_2461) ? 1'b1 : 1'b0);

assign tmp_5_0_4_i_fu_1135_p2 = ((tmp_32_fu_1131_p1 < valInWindow_0_minVal_2_reg_2477) ? 1'b1 : 1'b0);

assign tmp_5_1_1_i_fu_1203_p2 = ((tmp_34_fu_1199_p1 < valInWindow_0_minVal_4_reg_2499) ? 1'b1 : 1'b0);

assign tmp_5_1_2_i_fu_1232_p2 = ((tmp_35_fu_1228_p1 < valInWindow_0_minVal_5_reg_2510) ? 1'b1 : 1'b0);

assign tmp_5_1_3_i_fu_1266_p2 = ((tmp_36_fu_1262_p1 < valInWindow_0_minVal_6_reg_2521) ? 1'b1 : 1'b0);

assign tmp_5_1_4_i_fu_1295_p2 = ((tmp_37_fu_1291_p1 < valInWindow_0_minVal_7_reg_2532) ? 1'b1 : 1'b0);

assign tmp_5_1_i_fu_1174_p2 = ((tmp_33_fu_1170_p1 < valInWindow_0_minVal_3_reg_2488) ? 1'b1 : 1'b0);

assign tmp_5_2_1_i_fu_1353_p2 = ((tmp_39_fu_1349_p1 < valInWindow_0_minVal_9_reg_2554) ? 1'b1 : 1'b0);

assign tmp_5_2_2_i_fu_1382_p2 = ((tmp_40_fu_1378_p1 < valInWindow_0_minVal_23_reg_2565) ? 1'b1 : 1'b0);

assign tmp_5_2_3_i_fu_1411_p2 = ((tmp_41_fu_1407_p1 < valInWindow_0_minVal_10_reg_2576) ? 1'b1 : 1'b0);

assign tmp_5_2_4_i_fu_1445_p2 = ((tmp_42_fu_1441_p1 < valInWindow_0_minVal_11_reg_2587) ? 1'b1 : 1'b0);

assign tmp_5_2_i_fu_1324_p2 = ((tmp_38_fu_1320_p1 < valInWindow_0_minVal_8_reg_2543) ? 1'b1 : 1'b0);

assign tmp_5_3_1_i_fu_1503_p2 = ((tmp_44_fu_1499_p1 < valInWindow_0_minVal_13_reg_2609) ? 1'b1 : 1'b0);

assign tmp_5_3_2_i_fu_1542_p2 = ((tmp_45_fu_1538_p1 < valInWindow_0_minVal_14_reg_2620) ? 1'b1 : 1'b0);

assign tmp_5_3_3_i_fu_1580_p2 = ((tmp_46_fu_1576_p1 < valInWindow_0_minVal_15_reg_2631) ? 1'b1 : 1'b0);

assign tmp_5_3_4_i_fu_1650_p2 = ((tmp_47_fu_1646_p1 < valInWindow_0_minVal_16_reg_2647) ? 1'b1 : 1'b0);

assign tmp_5_3_i_fu_1474_p2 = ((tmp_43_fu_1470_p1 < valInWindow_0_minVal_12_reg_2598) ? 1'b1 : 1'b0);

assign tmp_5_4_1_i_fu_1727_p2 = ((tmp_49_fu_1723_p1 < valInWindow_0_minVal_18_reg_2690) ? 1'b1 : 1'b0);

assign tmp_5_4_2_i_fu_1756_p2 = ((tmp_50_fu_1752_p1 < valInWindow_0_minVal_19_reg_2701) ? 1'b1 : 1'b0);

assign tmp_5_4_3_i_fu_1790_p2 = ((tmp_51_fu_1786_p1 < valInWindow_0_minVal_20_reg_2712) ? 1'b1 : 1'b0);

assign tmp_5_4_4_i_fu_1839_p2 = ((tmp_52_reg_2658 < valInWindow_0_minVal_21_reg_2723) ? 1'b1 : 1'b0);

assign tmp_5_4_i_fu_1698_p2 = ((tmp_48_fu_1694_p1 < valInWindow_0_minVal_17_reg_2674) ? 1'b1 : 1'b0);

assign tmp_5_cast_fu_1882_p1 = tmp_4_fu_1872_p4;

assign tmp_5_fu_883_p1 = ap_phi_mux_pixProcessed_phi_fu_725_p4;

assign tmp_6_fu_832_p2 = (($signed(ap_phi_mux_col_assign_phi_fu_714_p4) < $signed(32'd239)) ? 1'b1 : 1'b0);

assign tmp_8_fu_1886_p1 = $signed(tmp_7_reg_2739);

assign tmp_9_fu_1889_p2 = (15'd0 - tmp_5_cast_fu_1882_p1);

assign tmp_s_fu_786_p1 = ap_phi_mux_col_assign_phi_fu_714_p4;

assign valInWindow_0_minVal_10_fu_1387_p3 = ((tmp_5_2_2_i_fu_1382_p2[0:0] === 1'b1) ? tmp_40_fu_1378_p1 : valInWindow_0_minVal_23_reg_2565);

assign valInWindow_0_minVal_11_fu_1416_p3 = ((tmp_5_2_3_i_fu_1411_p2[0:0] === 1'b1) ? tmp_41_fu_1407_p1 : valInWindow_0_minVal_10_reg_2576);

assign valInWindow_0_minVal_12_fu_1450_p3 = ((tmp_5_2_4_i_fu_1445_p2[0:0] === 1'b1) ? tmp_42_fu_1441_p1 : valInWindow_0_minVal_11_reg_2587);

assign valInWindow_0_minVal_13_fu_1479_p3 = ((tmp_5_3_i_fu_1474_p2[0:0] === 1'b1) ? tmp_43_fu_1470_p1 : valInWindow_0_minVal_12_reg_2598);

assign valInWindow_0_minVal_14_fu_1508_p3 = ((tmp_5_3_1_i_fu_1503_p2[0:0] === 1'b1) ? tmp_44_fu_1499_p1 : valInWindow_0_minVal_13_reg_2609);

assign valInWindow_0_minVal_15_fu_1547_p3 = ((tmp_5_3_2_i_fu_1542_p2[0:0] === 1'b1) ? tmp_45_fu_1538_p1 : valInWindow_0_minVal_14_reg_2620);

assign valInWindow_0_minVal_16_fu_1585_p3 = ((tmp_5_3_3_i_fu_1580_p2[0:0] === 1'b1) ? tmp_46_fu_1576_p1 : valInWindow_0_minVal_15_reg_2631);

assign valInWindow_0_minVal_17_fu_1655_p3 = ((tmp_5_3_4_i_fu_1650_p2[0:0] === 1'b1) ? tmp_47_fu_1646_p1 : valInWindow_0_minVal_16_reg_2647);

assign valInWindow_0_minVal_18_fu_1703_p3 = ((tmp_5_4_i_fu_1698_p2[0:0] === 1'b1) ? tmp_48_fu_1694_p1 : valInWindow_0_minVal_17_reg_2674);

assign valInWindow_0_minVal_19_fu_1732_p3 = ((tmp_5_4_1_i_fu_1727_p2[0:0] === 1'b1) ? tmp_49_fu_1723_p1 : valInWindow_0_minVal_18_reg_2690);

assign valInWindow_0_minVal_1_fu_1081_p3 = ((tmp_5_0_2_i_fu_1076_p2[0:0] === 1'b1) ? tmp_30_fu_1072_p1 : valInWindow_0_minVal_reg_2420);

assign valInWindow_0_minVal_20_fu_1761_p3 = ((tmp_5_4_2_i_fu_1756_p2[0:0] === 1'b1) ? tmp_50_fu_1752_p1 : valInWindow_0_minVal_19_reg_2701);

assign valInWindow_0_minVal_21_fu_1795_p3 = ((tmp_5_4_3_i_fu_1790_p2[0:0] === 1'b1) ? tmp_51_fu_1786_p1 : valInWindow_0_minVal_20_reg_2712);

assign valInWindow_0_minVal_22_fu_1843_p3 = ((tmp_5_4_4_i_fu_1839_p2[0:0] === 1'b1) ? tmp_52_reg_2658 : valInWindow_0_minVal_21_reg_2723);

assign valInWindow_0_minVal_23_fu_1358_p3 = ((tmp_5_2_1_i_fu_1353_p2[0:0] === 1'b1) ? tmp_39_fu_1349_p1 : valInWindow_0_minVal_9_reg_2554);

assign valInWindow_0_minVal_2_fu_1110_p3 = ((tmp_5_0_3_i_fu_1105_p2[0:0] === 1'b1) ? tmp_31_fu_1101_p1 : valInWindow_0_minVal_1_reg_2461);

assign valInWindow_0_minVal_3_fu_1140_p3 = ((tmp_5_0_4_i_fu_1135_p2[0:0] === 1'b1) ? tmp_32_fu_1131_p1 : valInWindow_0_minVal_2_reg_2477);

assign valInWindow_0_minVal_4_fu_1179_p3 = ((tmp_5_1_i_fu_1174_p2[0:0] === 1'b1) ? tmp_33_fu_1170_p1 : valInWindow_0_minVal_3_reg_2488);

assign valInWindow_0_minVal_5_fu_1208_p3 = ((tmp_5_1_1_i_fu_1203_p2[0:0] === 1'b1) ? tmp_34_fu_1199_p1 : valInWindow_0_minVal_4_reg_2499);

assign valInWindow_0_minVal_6_fu_1237_p3 = ((tmp_5_1_2_i_fu_1232_p2[0:0] === 1'b1) ? tmp_35_fu_1228_p1 : valInWindow_0_minVal_5_reg_2510);

assign valInWindow_0_minVal_7_fu_1271_p3 = ((tmp_5_1_3_i_fu_1266_p2[0:0] === 1'b1) ? tmp_36_fu_1262_p1 : valInWindow_0_minVal_6_reg_2521);

assign valInWindow_0_minVal_8_fu_1300_p3 = ((tmp_5_1_4_i_fu_1295_p2[0:0] === 1'b1) ? tmp_37_fu_1291_p1 : valInWindow_0_minVal_7_reg_2532);

assign valInWindow_0_minVal_9_fu_1329_p3 = ((tmp_5_2_i_fu_1324_p2[0:0] === 1'b1) ? tmp_38_fu_1320_p1 : valInWindow_0_minVal_8_reg_2543);

assign valInWindow_0_minVal_fu_1041_p3 = ((tmp_5_0_1_i_fu_1036_p2[0:0] === 1'b1) ? tmp_29_fu_1032_p1 : tmp_28_reg_2334);

assign valOutput_1_fu_1899_p3 = ((tmp_25_reg_2734[0:0] === 1'b1) ? tmp_9_fu_1889_p2 : tmp_10_cast_fu_1895_p1);

assign valOutput_fu_1816_p2 = (tmp23_reg_2685 + tmp11_fu_1811_p2);

assign window_val_0_0_fu_969_p0 = window_val_0_0_fu_969_p00;

assign window_val_0_0_fu_969_p00 = lineBuff_val_0_q0;

assign window_val_0_0_fu_969_p1 = reg_744;

assign window_val_0_0_fu_969_p2 = ($signed({{1'b0}, {window_val_0_0_fu_969_p0}}) * $signed(window_val_0_0_fu_969_p1));

assign window_val_0_1_fu_1026_p0 = window_val_0_1_fu_1026_p00;

assign window_val_0_1_fu_1026_p00 = reg_752;

assign window_val_0_1_fu_1026_p1 = reg_748;

assign window_val_0_1_fu_1026_p2 = ($signed({{1'b0}, {window_val_0_1_fu_1026_p0}}) * $signed(window_val_0_1_fu_1026_p1));

assign window_val_0_2_fu_1056_p0 = window_val_0_2_fu_1056_p00;

assign window_val_0_2_fu_1056_p00 = reg_752;

assign window_val_0_2_fu_1056_p1 = reg_744;

assign window_val_0_2_fu_1056_p2 = ($signed({{1'b0}, {window_val_0_2_fu_1056_p0}}) * $signed(window_val_0_2_fu_1056_p1));

assign window_val_0_3_fu_1095_p0 = window_val_0_3_fu_1095_p00;

assign window_val_0_3_fu_1095_p00 = lineBuff_val_0_load_3_reg_2345;

assign window_val_0_3_fu_1095_p1 = reg_748;

assign window_val_0_3_fu_1095_p2 = ($signed({{1'b0}, {window_val_0_3_fu_1095_p0}}) * $signed(window_val_0_3_fu_1095_p1));

assign window_val_0_4_fu_1125_p0 = window_val_0_4_fu_1125_p00;

assign window_val_0_4_fu_1125_p00 = reg_752;

assign window_val_0_4_fu_1125_p1 = reg_744;

assign window_val_0_4_fu_1125_p2 = ($signed({{1'b0}, {window_val_0_4_fu_1125_p0}}) * $signed(window_val_0_4_fu_1125_p1));

assign window_val_1_0_fu_1154_p0 = window_val_1_0_fu_1154_p00;

assign window_val_1_0_fu_1154_p00 = lineBuff_val_1_load_1_reg_2264;

assign window_val_1_0_fu_1154_p1 = reg_748;

assign window_val_1_0_fu_1154_p2 = ($signed({{1'b0}, {window_val_1_0_fu_1154_p0}}) * $signed(window_val_1_0_fu_1154_p1));

assign window_val_1_1_fu_1193_p0 = window_val_1_1_fu_1193_p00;

assign window_val_1_1_fu_1193_p00 = lineBuff_val_1_load_2_reg_2269;

assign window_val_1_1_fu_1193_p1 = reg_744;

assign window_val_1_1_fu_1193_p2 = ($signed({{1'b0}, {window_val_1_1_fu_1193_p0}}) * $signed(window_val_1_1_fu_1193_p1));

assign window_val_1_2_fu_1222_p0 = window_val_1_2_fu_1222_p00;

assign window_val_1_2_fu_1222_p00 = lineBuff_val_1_load_3_reg_2355;

assign window_val_1_2_fu_1222_p1 = reg_748;

assign window_val_1_2_fu_1222_p2 = ($signed({{1'b0}, {window_val_1_2_fu_1222_p0}}) * $signed(window_val_1_2_fu_1222_p1));

assign window_val_1_3_fu_1251_p0 = window_val_1_3_fu_1251_p00;

assign window_val_1_3_fu_1251_p00 = lineBuff_val_1_load_4_reg_2360;

assign window_val_1_3_fu_1251_p1 = reg_744;

assign window_val_1_3_fu_1251_p2 = ($signed({{1'b0}, {window_val_1_3_fu_1251_p0}}) * $signed(window_val_1_3_fu_1251_p1));

assign window_val_1_4_fu_1285_p0 = window_val_1_4_fu_1285_p00;

assign window_val_1_4_fu_1285_p00 = lineBuff_val_1_load_5_reg_2426;

assign window_val_1_4_fu_1285_p1 = reg_748;

assign window_val_1_4_fu_1285_p2 = ($signed({{1'b0}, {window_val_1_4_fu_1285_p0}}) * $signed(window_val_1_4_fu_1285_p1));

assign window_val_2_0_fu_1314_p0 = window_val_2_0_fu_1314_p00;

assign window_val_2_0_fu_1314_p00 = lineBuff_val_2_load_1_reg_2284;

assign window_val_2_0_fu_1314_p1 = reg_744;

assign window_val_2_0_fu_1314_p2 = ($signed({{1'b0}, {window_val_2_0_fu_1314_p0}}) * $signed(window_val_2_0_fu_1314_p1));

assign window_val_2_1_fu_1343_p0 = window_val_2_1_fu_1343_p00;

assign window_val_2_1_fu_1343_p00 = lineBuff_val_2_load_2_reg_2289;

assign window_val_2_1_fu_1343_p1 = reg_748;

assign window_val_2_1_fu_1343_p2 = ($signed({{1'b0}, {window_val_2_1_fu_1343_p0}}) * $signed(window_val_2_1_fu_1343_p1));

assign window_val_2_2_fu_1372_p0 = window_val_2_2_fu_1372_p00;

assign window_val_2_2_fu_1372_p00 = lineBuff_val_2_load_3_reg_2370;

assign window_val_2_2_fu_1372_p1 = reg_744;

assign window_val_2_2_fu_1372_p2 = ($signed({{1'b0}, {window_val_2_2_fu_1372_p0}}) * $signed(window_val_2_2_fu_1372_p1));

assign window_val_2_3_fu_1401_p0 = window_val_2_3_fu_1401_p00;

assign window_val_2_3_fu_1401_p00 = lineBuff_val_2_load_4_reg_2375;

assign window_val_2_3_fu_1401_p1 = reg_748;

assign window_val_2_3_fu_1401_p2 = ($signed({{1'b0}, {window_val_2_3_fu_1401_p0}}) * $signed(window_val_2_3_fu_1401_p1));

assign window_val_2_4_fu_1430_p0 = window_val_2_4_fu_1430_p00;

assign window_val_2_4_fu_1430_p00 = lineBuff_val_2_load_5_reg_2431;

assign window_val_2_4_fu_1430_p1 = reg_744;

assign window_val_2_4_fu_1430_p2 = ($signed({{1'b0}, {window_val_2_4_fu_1430_p0}}) * $signed(window_val_2_4_fu_1430_p1));

assign window_val_3_0_fu_1464_p0 = window_val_3_0_fu_1464_p00;

assign window_val_3_0_fu_1464_p00 = lineBuff_val_3_load_1_reg_2304;

assign window_val_3_0_fu_1464_p1 = reg_748;

assign window_val_3_0_fu_1464_p2 = ($signed({{1'b0}, {window_val_3_0_fu_1464_p0}}) * $signed(window_val_3_0_fu_1464_p1));

assign window_val_3_1_fu_1493_p0 = window_val_3_1_fu_1493_p00;

assign window_val_3_1_fu_1493_p00 = lineBuff_val_3_load_2_reg_2309;

assign window_val_3_1_fu_1493_p1 = reg_744;

assign window_val_3_1_fu_1493_p2 = ($signed({{1'b0}, {window_val_3_1_fu_1493_p0}}) * $signed(window_val_3_1_fu_1493_p1));

assign window_val_3_2_fu_1522_p0 = window_val_3_2_fu_1522_p00;

assign window_val_3_2_fu_1522_p00 = lineBuff_val_3_load_3_reg_2385;

assign window_val_3_2_fu_1522_p1 = reg_748;

assign window_val_3_2_fu_1522_p2 = ($signed({{1'b0}, {window_val_3_2_fu_1522_p0}}) * $signed(window_val_3_2_fu_1522_p1));

assign window_val_3_3_fu_1561_p0 = window_val_3_3_fu_1561_p00;

assign window_val_3_3_fu_1561_p00 = lineBuff_val_3_load_4_reg_2390;

assign window_val_3_3_fu_1561_p1 = reg_744;

assign window_val_3_3_fu_1561_p2 = ($signed({{1'b0}, {window_val_3_3_fu_1561_p0}}) * $signed(window_val_3_3_fu_1561_p1));

assign window_val_3_4_fu_1621_p0 = window_val_3_4_fu_1621_p00;

assign window_val_3_4_fu_1621_p00 = lineBuff_val_3_load_5_reg_2436;

assign window_val_3_4_fu_1621_p1 = reg_748;

assign window_val_3_4_fu_1621_p2 = ($signed({{1'b0}, {window_val_3_4_fu_1621_p0}}) * $signed(window_val_3_4_fu_1621_p1));

assign window_val_4_0_fu_1669_p0 = window_val_4_0_fu_1669_p00;

assign window_val_4_0_fu_1669_p00 = lineBuff_val_4_load_1_reg_2400;

assign window_val_4_0_fu_1669_p1 = reg_744;

assign window_val_4_0_fu_1669_p2 = ($signed({{1'b0}, {window_val_4_0_fu_1669_p0}}) * $signed(window_val_4_0_fu_1669_p1));

assign window_val_4_1_fu_1717_p0 = window_val_4_1_fu_1717_p00;

assign window_val_4_1_fu_1717_p00 = lineBuff_val_4_load_2_reg_2441;

assign window_val_4_1_fu_1717_p1 = reg_748;

assign window_val_4_1_fu_1717_p2 = ($signed({{1'b0}, {window_val_4_1_fu_1717_p0}}) * $signed(window_val_4_1_fu_1717_p1));

assign window_val_4_2_fu_1746_p0 = window_val_4_2_fu_1746_p00;

assign window_val_4_2_fu_1746_p00 = lineBuff_val_4_load_3_reg_2472;

assign window_val_4_2_fu_1746_p1 = reg_744;

assign window_val_4_2_fu_1746_p2 = ($signed({{1'b0}, {window_val_4_2_fu_1746_p0}}) * $signed(window_val_4_2_fu_1746_p1));

assign window_val_4_3_fu_1775_p0 = window_val_4_3_fu_1775_p00;

assign window_val_4_3_fu_1775_p00 = lineBuff_val_4_load_4_reg_2451;

assign window_val_4_3_fu_1775_p1 = reg_748;

assign window_val_4_3_fu_1775_p2 = ($signed({{1'b0}, {window_val_4_3_fu_1775_p0}}) * $signed(window_val_4_3_fu_1775_p1));

assign window_val_4_4_fu_1599_p0 = window_val_4_4_fu_1599_p00;

assign window_val_4_4_fu_1599_p00 = lineBuff_val_4_load_5_reg_2415;

assign window_val_4_4_fu_1599_p1 = kernel_q0;

assign window_val_4_4_fu_1599_p2 = ($signed({{1'b0}, {window_val_4_4_fu_1599_p0}}) * $signed(window_val_4_4_fu_1599_p1));

always @ (posedge ap_clk) begin
    tmp_s_reg_2082[63:32] <= 32'b00000000000000000000000000000000;
    tmp_5_reg_2156[63:32] <= 32'b00000000000000000000000000000000;
    tmp_27_0_1_reg_2166[63:32] <= 32'b00000000000000000000000000000000;
    tmp_27_0_2_reg_2236[63:32] <= 32'b00000000000000000000000000000000;
    tmp_27_0_3_reg_2246[63:32] <= 32'b00000000000000000000000000000000;
    tmp_27_0_4_reg_2256[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //doImgProc
